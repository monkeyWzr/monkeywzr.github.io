<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[ADO学习笔记]]></title>
      <url>http://www.upwzr.com/2016/08/24/2015-11-9-ADO-notes/</url>
      <content type="html"><![CDATA[<blockquote>
<p>ADO - ActiveX Data Objects</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git日常使用心得]]></title>
      <url>http://www.upwzr.com/2016/07/05/git-notes/</url>
      <content type="html"><![CDATA[<h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><h3 id="忽略文件或文件夹只在本地需要使用"><a href="#忽略文件或文件夹只在本地需要使用" class="headerlink" title="忽略文件或文件夹只在本地需要使用"></a>忽略文件或文件夹只在本地需要使用</h3><p>此种情况为，文件或文件夹只在本地需要，不应该出现在远程仓库时。<br>在将忽略文件或路径更新到<code>.gitignore</code>后，若对于已经trace的文件，需要让git不再跟踪，执行下列命令：</p>
<pre><code>//目标为文件夹则需加入-r参数
git rm --cache /path/to/file
</code></pre><h3 id="文件或文件夹的改动不需要提交"><a href="#文件或文件夹的改动不需要提交" class="headerlink" title="文件或文件夹的改动不需要提交"></a>文件或文件夹的改动不需要提交</h3><p>有些文件或文件夹的改动不需要提交，则在更新<code>.gitignore</code>的同时也要执行执行：</p>
<pre><code>git update-index --assume-unchanged logs/*.log
</code></pre><p>此种情况下需要每位成员都在自己的本地仓库执行上述命令。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jquery实现表单上传图片预览]]></title>
      <url>http://www.upwzr.com/2016/06/03/form-image-preview/</url>
      <content type="html"><![CDATA[<p>最近有个小页面需要实现图片上传预览，自己还不擅长javascript，迷茫的看了好久文档之后算是利用File API实现了这个事情。<br>js代码：</p>
<pre><code>&lt;script&gt;
    function preview(files){
      for (var i = 0; i &lt; files.length; i++) {
        var file = files[i];
        var reader = new FileReader();
        reader.onload = (function(aImg) { 
          return function(e) { 
            //假设页面上的img元素id为showimg
            $(&apos;#showimg&apos;) . attr(&apos;src&apos;, e.target.result);
          }; 
        })();
        reader.readAsDataURL(file);
      }
    }
&lt;/script&gt;
</code></pre><p>调用只要在input元素上加上<code>onchange=&quot;preview(this.files)&quot;</code>。</p>
<blockquote>
<p>相关链接<br><a href="https://developer.mozilla.org/zh-CN/docs/Using_files_from_web_applications#%E4%BE%8B%E5%AD%90%EF%BC%9A%E6%98%BE%E7%A4%BA%E7%94%A8%E6%88%B7%E6%89%80%E9%80%89%E5%9B%BE%E7%89%87%E7%9A%84%E7%BC%A9%E7%95%A5%E5%9B%BE" target="_blank" rel="external">在web应用中使用文件 – Mozilla 文档</a><br>来自百度的一个上传组件<a href="http://fex.baidu.com/webuploader/" target="_blank" rel="external">http://fex.baidu.com/webuploader/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[文件上传组件Web Uploader]]></title>
      <url>http://www.upwzr.com/2016/06/03/webuploader/</url>
      <content type="html"><![CDATA[<p>WebUploader是由Baidu WebFE(FEX)团队开发的一个简单的以HTML5为主，FLASH为辅的现代文件上传组件。感觉对于实现图片上传预览，截屏等效功能会很方便。虽然我并没有用过。。</p>
<blockquote>
<p><a href="http://fex.baidu.com/webuploader/" target="_blank" rel="external">http://fex.baidu.com/webuploader/</a><br><a href="https://github.com/fex-team/webuploader/" target="_blank" rel="external">https://github.com/fex-team/webuploader/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[暑假越南行]]></title>
      <url>http://www.upwzr.com/2016/06/03/summer-trip-to-Vietnam/</url>
      <content type="html"><![CDATA[<h2 id="【2016-8-25-已更新至在越南境内的第三天】"><a href="#【2016-8-25-已更新至在越南境内的第三天】" class="headerlink" title="【2016.8.25 已更新至在越南境内的第三天】"></a>【2016.8.25 已更新至在越南境内的第三天】</h2><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>2016.6.3 开始写此文。之前的几个月办下了护照，看了些攻略。</p>
<h3 id="路线计划："><a href="#路线计划：" class="headerlink" title="路线计划："></a>路线计划：</h3><p>我只是在脑子里想了想大概的路线，因为打算自由一点，走一步算一步（其实是实在没耐心做详细的规划）。<br>河内 顺化 岘港 会安 芽庄 大叻 美奈 胡志明<br>从长沙出发到南宁，做大巴出关。</p>
<h3 id="待办："><a href="#待办：" class="headerlink" title="待办："></a>待办：</h3><p><del>签证 保险 买背包、一双徒步鞋</del></p>
<h2 id="出发啦"><a href="#出发啦" class="headerlink" title="出发啦"></a>出发啦</h2><h3 id="2016-7-31-南宁"><a href="#2016-7-31-南宁" class="headerlink" title="2016.7.31 南宁"></a>2016.7.31 南宁</h3><p>出发去南宁~在瓦舍订了一晚，听说是很棒的青旅。到了之后发现位置不是很好，但是里面的环境还不错。（忘了拍照）<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160731_205641.jpg" alt="img"></p>
<p>在夜市上吃到的一碗不知叫什么的粉<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160731_222154.jpg" alt="img"></p>
<h3 id="2016-8-1-南宁-河内"><a href="#2016-8-1-南宁-河内" class="headerlink" title="2016.8.1 南宁-河内"></a>2016.8.1 南宁-河内</h3><p>早上到车站，准备坐大巴出发<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_080821.jpg" alt="img"></p>
<p>越南那一侧的边检，在我们这边时没敢拍照。。</p>
<p><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_112540.jpg" alt="img"></p>
<p>话说我们的兵哥哥真不是盖的，无论是气势，纪律还是外观，比越南简直强太多了。。</p>
<p>从口岸去河内的路上<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_112548.jpg" alt="img"><br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/IMG_20160801_145519.jpg" alt="img"></p>
<p>在离河内大概还有20多公里的时候，我们的大巴竟然 <strong>爆胎了！！！</strong>左后轮并列的两个胎全爆<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_153814.jpg" alt="img"><br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_153902.jpg" alt="img"><br>倾斜的大巴，这要是爆的前胎的话，简直不敢想会有什么后果<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_154148.jpg" alt="img"><br>兵哥哥过来查看，丑爆的交警制服。。<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_154412.jpg" alt="img"></p>
<p>终于到了市里~<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_175203.jpg" alt="img"></p>
<p>在河内三十六行街吃到了人生中第一碗河粉。<strong>好吃到爆！</strong><br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_192308.jpg" alt="img"></p>
<p>当晚的青旅，就在三十六行街<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_195540.jpg" alt="img"></p>
<p>还剑湖夜景<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_200800.jpg" alt="img"></p>
<p>湖边卖艺的欧洲帅哥<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_201847.jpg" alt="img"></p>
<p>๑乛◡乛๑<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160801_203526.jpg" alt="img"></p>
<h3 id="2016-8-2-河内"><a href="#2016-8-2-河内" class="headerlink" title="2016.8.2 河内"></a>2016.8.2 河内</h3><p>属于河内的一天</p>
<p><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160802_112209.jpg" alt="img"><br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160802_112617.jpg" alt="img"><br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160802_112954.jpg" alt="img"><br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160802_113025.jpg" alt="img"><br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160802_115419.jpg" alt="img"></p>
<p>巴亭广场&amp;胡志明纪念堂<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160802_132245.jpg" alt="img"></p>
<p>高地咖啡店里头点的法棍<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160802_135556.jpg" alt="img"></p>
<p>下午又遇到了在大巴上认识的大叔，超级超级nice的人，拉着我去他酒店歇脚，又拿饮料又泡茶，临走还多次嘱托我一个人要注意安全。合影就不贴上来了（//▽//）</p>
<p>晚上坐上了去岘港（实际是去顺化）的sleeping bus，是（在国内）比较出名的新咖啡。一天算是结束啦<br><img src="http://7xi8b3.com1.z0.glb.clouddn.com/blog/vietnamIMG_20160802_183318.jpg" alt="img"></p>
<p>感想：河内街头的摩的 <strong>不能坐</strong> ，无论他们怎样跟你打感情牌；掏钱的时候要注意数清楚有几个零；去便利店买酸奶喝，有个妹子跟我聊的很开心，老板娘也很善意，这在人人都想宰你一笔的河内来说真的好难得。。</p>
<h3 id="2016-8-3-岘港"><a href="#2016-8-3-岘港" class="headerlink" title="2016.8.3 岘港"></a>2016.8.3 岘港</h3><p>未完待续</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[kali2016下phpredis的使用]]></title>
      <url>http://www.upwzr.com/2016/05/17/phpredis/</url>
      <content type="html"><![CDATA[<h2 id="phpredis安装"><a href="#phpredis安装" class="headerlink" title="phpredis安装"></a>phpredis安装</h2><p>安装phpredis非常的简单，github上文档写的很详细。<br>在源码根目录执行：</p>
<pre><code>phpize
./configure [--enable-redis-igbinary]
sudo make &amp;&amp; sudo make install
</code></pre><p>对于没有安装phpize的情况，可以apt-get安装dev包</p>
<pre><code>sudo apt-get install php5-dev
</code></pre><p>如果用的是php7，记得要使用php7分支，或者终端下载：</p>
<pre><code>git clone -b php7 https://github.com/phpredis/phpredis.git
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简记oath2.0]]></title>
      <url>http://www.upwzr.com/2016/04/22/understanding-oauth2/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>OAuth2就是第三方应用获取授权的一套开放网络标准。它在客户端和服务端提供了一层中间授权层，客户端提供登录信息给授权层，登录成功后会拿到一张自己的通行令牌（token），客户端凭借此令牌别可以得到相行的服务端访问权限。</p>
<h3 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h3><p><img src="/img/2016-04-13-understanding-oauth2_1.png" alt="img"></p>
<ul>
<li>客户端向用户提示授权</li>
<li>用户同意授权，向客户端提供授权许可（grant）</li>
<li>客户端向认证服务器发送认证请求，请求中包含用户提供的授权许可</li>
<li>认证成功后认证服务器向客户端发放令牌（token）</li>
<li>客户端使用令牌向服务器端请求资源</li>
<li>资源服务器验证令牌有效，答复请求</li>
</ul>
<h2 id="授权许可方式"><a href="#授权许可方式" class="headerlink" title="授权许可方式"></a>授权许可方式</h2><p>在用户向客户端提供授权许可这一环节，OAuth2定义了四种类型：授权码模式（authorization code）、简化模式（implicit）、密码模式（resource owner password credentials）、客户端模式（client credentials）。</p>
<h3 id="授权码（authorization-code）"><a href="#授权码（authorization-code）" class="headerlink" title="授权码（authorization code）"></a>授权码（authorization code）</h3><p>这种模式中，客户端将用户引导到授权服务器上，用户同意授权后授权服务器将会令用户重定向至客户端指定的回调地址，并带有授权码。客户端收到授权码后便会自行请求认证服务器，认证服务器核对无误即会返回给客户端访问令牌和更新令牌。整个流程中用户实际上只是跟认证服务器提交了认证，并未与客户端分享任何登录信息。</p>
<h3 id="简化模式（implicit）"><a href="#简化模式（implicit）" class="headerlink" title="简化模式（implicit）"></a>简化模式（implicit）</h3><p>（懒得简化了，先贴出来放在这=。=）<br>The implicit grant is a simplified authorization code flow optimized<br>for clients implemented in a browser using a scripting language such<br>as JavaScript.  In the implicit flow, instead of issuing the client<br>an authorization code, the client is issued an access token directly<br>(as the result of the resource owner authorization).  The grant type<br>is implicit, as no intermediate credentials (such as an authorization<br>code) are issued (and later used to obtain an access token).<br>When issuing an access token during the implicit grant flow, the<br>authorization server does not authenticate the client.  In some<br>cases, the client identity can be verified via the redirection URI<br>used to deliver the access token to the client.  The access token may<br>be exposed to the resource owner or other applications with access to<br>the resource owner’s user-agent.<br>Implicit grants improve the responsiveness and efficiency of some<br>clients (such as a client implemented as an in-browser application),<br>since it reduces the number of round trips required to obtain an<br>access token.  However, this convenience should be weighed against<br>the security implications of using implicit grants, such as those<br>described in Sections 10.3 and 10.16, especially when the<br>authorization code grant type is available.</p>
<h3 id="密码凭证（resource-owner-password-credentials）"><a href="#密码凭证（resource-owner-password-credentials）" class="headerlink" title="密码凭证（resource owner password credentials）"></a>密码凭证（resource owner password credentials）</h3><p>这种授权模式适用于客户端具有高可信度的情况。用户将会给客户端提供自己的的登录信息（如用户名和密码），客户端使用这些信息向认证服务器发送请求获取令牌。原则上客户端是不允许存储这些登录信息的，但是客户端有没有真的遵守就不知道了。。。</p>
<h3 id="客户端凭证（client-credentials）"><a href="#客户端凭证（client-credentials）" class="headerlink" title="客户端凭证（client credentials）"></a>客户端凭证（client credentials）</h3><p>这种模式下用户并没有与认证服务器进行交流，而是在客户端进行注册或登录，登录成功后客户端会以自己的名义去请求认证服务器获取令牌。也就是说认证服务器是看在客户端的面子上给用户提供了相应的权限。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>this is a deep hole。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[php几种设计模式]]></title>
      <url>http://www.upwzr.com/2016/04/18/php-moshi/</url>
      <content type="html"><![CDATA[<h2 id="php设计模式"><a href="#php设计模式" class="headerlink" title="php设计模式"></a>php设计模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h3 id="多例模式"><a href="#多例模式" class="headerlink" title="多例模式"></a>多例模式</h3><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理模式实际上就是解决了在有些不适合继承的情况下使用方法的问题。在proxy类中实现__call()方法调用被代理类的方法。</p>
<h3 id="外观模式（facade）"><a href="#外观模式（facade）" class="headerlink" title="外观模式（facade）"></a>外观模式（facade）</h3><h3 id="装饰者模式-decorator"><a href="#装饰者模式-decorator" class="headerlink" title="装饰者模式(decorator)"></a>装饰者模式(decorator)</h3><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h3 id="发布者-订阅者模式"><a href="#发布者-订阅者模式" class="headerlink" title="发布者/订阅者模式"></a>发布者/订阅者模式</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu server 搭建apache/mysql/php7]]></title>
      <url>http://www.upwzr.com/2016/04/01/ubuntu-server-lamp/</url>
      <content type="html"><![CDATA[<h2 id="先安装php的情况"><a href="#先安装php的情况" class="headerlink" title="先安装php的情况"></a>先安装php的情况</h2><p>如果安装php的时候还没有安装apache，那么安装好apache后需要安装一个模块：</p>
<pre><code>$ sudo apt-get install libapache2-mod-php7.0
//如果安装的是php5则安装下面的包
$ sudo apt-get install libapache2-mod-php
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django常用命令]]></title>
      <url>http://www.upwzr.com/2016/03/29/django-commands/</url>
      <content type="html"><![CDATA[<ul>
<li><code>makemigrations</code> 创建迁移信息</li>
<li><code>sqlmigrate</code> 输出生成的sql语句</li>
<li><code>migrate</code> 同步所有未应用的改动</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker基础简记]]></title>
      <url>http://www.upwzr.com/2016/03/09/docker-guide/</url>
      <content type="html"><![CDATA[<h2 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h2><blockquote>
<p>Docker allows you to package an application with all of its dependencies into a standardized unit for software development.<br>            <em>—-<a href="https://www.docker.com/what-docker#/copy1" target="_blank" rel="external">What is Docker?</a></em></p>
</blockquote>
<p>Docker是近几年兴起的发展非常快速的开源项目，可用来创建非常轻量的“虚拟机”。在这里重要的两个概念是 <strong>镜像</strong> 和 <strong>容器</strong> 。</p>
<h2 id="docker命令简记"><a href="#docker命令简记" class="headerlink" title="docker命令简记"></a>docker命令简记</h2><ul>
<li><code>run</code> 启动<ul>
<li>-t 在容器内指定一个终端</li>
<li>-i 允许对容器内的STDIN进行交互</li>
<li>-d 在容器内已后台进程模式运行</li>
<li>-P 将容器内部使用的网络端口随机映射到主机高端口上</li>
<li>-p 指定要绑定的端口，具体用法见文档</li>
<li>-e <em>KEY=value</em> 设置环境变量</li>
<li>–name _container_name_ 为容器命名</li>
<li>–rm 创建临时容器，停止后删除</li>
</ul>
</li>
<li><code>ps</code> 查看正在运行的容器<ul>
<li>-l 显示最后启动容器的详细信息</li>
<li>-a 显示所有容器，包括已经停止的</li>
</ul>
</li>
<li><code>logs</code> _container_name_ 查看容器内的标准输出<ul>
<li>-f 保持活动状态，动态显示新添加的信息</li>
</ul>
</li>
<li><code>stop</code> 停止正在工作的容器</li>
<li><code>version</code> 返回Docker 客户端和进程的版本信息</li>
<li><code>port</code> _container_name_</li>
<li><code>top</code> 查看容器内部运行的进程</li>
<li><code>inspect</code> 查看容器的底层信息（配置和状态），JSON格式<ul>
<li>-f ‘<em>‘</em> 显示指定的信息</li>
</ul>
</li>
<li><code>search</code> 搜索镜像</li>
<li><code>tag</code> 为镜像添加标签</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基本的bash shell命令]]></title>
      <url>http://www.upwzr.com/2016/03/05/bash-shell/</url>
      <content type="html"><![CDATA[<h2 id="基本的bash-shell命令"><a href="#基本的bash-shell命令" class="headerlink" title="基本的bash shell命令"></a>基本的bash shell命令</h2><h3 id="处理文件和目录"><a href="#处理文件和目录" class="headerlink" title="处理文件和目录"></a>处理文件和目录</h3><ul>
<li><code>ls</code> 输出目录<ul>
<li>-s 显示文件大小</li>
<li>-a 输出隐藏文件</li>
<li>-i 显示文件的索引值</li>
<li>-l 产生长列表的输出</li>
<li>-R 递归列出子目录内容</li>
</ul>
</li>
<li><code>touch</code> 创建新文件或者改变访问/修改时间<ul>
<li>-a 只改变访问时间</li>
<li>-m 只改变修改时间</li>
<li>-t 指定时间戳</li>
</ul>
</li>
<li><code>cp</code> 复制文件<ul>
<li>-f 强制覆盖不提示</li>
<li>-i 覆盖前提示</li>
<li>-r 递归的复制文件</li>
<li>-R 递归的复制目录</li>
<li>-l 创建文件链接（硬链接）</li>
<li>-s 创建符号链接（软连接）</li>
<li>-v 详细模式</li>
</ul>
</li>
<li><code>mv</code> 移动文件（重命名）</li>
<li><code>rm</code> 删除文件<ul>
<li>-i 删除前提示</li>
<li>-f 强制删除不提示</li>
<li>-r 递归删除非空目录</li>
</ul>
</li>
<li><code>mkdir</code> 创建目录</li>
<li><code>stat</code> 提供文件的所有状态信息</li>
<li><code>file</code> 查看文件类型</li>
<li><code>cat</code> 显示文本数据<ul>
<li>-n 给所有行加上行号</li>
<li>-b 给有文本的行加上行号</li>
<li>-s 多个空白行压缩为一行</li>
<li>-T 用^I替换制表符</li>
</ul>
</li>
<li><code>more</code> 分页显示<ul>
<li>空格 显示下一屏</li>
<li>ENTER 显示下一行</li>
<li>/expression 查找</li>
<li>n 查找下一处匹配的内容</li>
<li>‘ 调到匹配的第一处内容</li>
<li>!cmd 执行shell</li>
<li>v 在当前行启动vi</li>
<li>= 显示当前行号</li>
<li>. 执行前一条命令</li>
</ul>
</li>
<li><code>sort</code> 读文本文件中的数据行排序<ul>
<li>-n 数字识别为数字</li>
<li>-M 按月排序（常用于日志文件）</li>
<li>-r 反序</li>
<li>-b 忽略起始的空白</li>
<li>-t 指定字段分隔符</li>
<li>-k 指定排序字段</li>
</ul>
</li>
<li><code>tail</code> 显示文件末尾的内容<ul>
<li>-c <em>bytes</em> 显示文件最后的bytes字节的内容</li>
<li>-n <em>lines</em> 显示文件最后的lines行</li>
<li>-f 保持活动，有新内容添加到末尾就显示</li>
<li>-s sec 与-f一起，每次输出前休眠sec秒ps</li>
<li>-v 显示带文件名的头</li>
<li>-q 从不显示带文件名的头</li>
</ul>
</li>
<li><code>head</code> 显示文件开头的内容，类似tail</li>
<li><code>grep</code> <em>[option] pattern [file]</em> 查找文件中大的一行数据<ul>
<li>-v 输出不匹配的行</li>
<li>-n 显示匹配行的行号</li>
<li>-c 输出匹配的行数</li>
<li>-e 指定多个匹配字符串（满足任意一个），通常用正则表达式替代</li>
<li>-i 忽略大小写</li>
</ul>
</li>
<li><code>tr</code> 替换或删除文件或文本中的字符</li>
<li><code>egrep</code> 支持POSIX扩展正则表达式</li>
<li><code>tar</code> <em>function [options] obj1 obj2</em> 归档<ul>
<li>-A 将一个tar文件追加到另一个tar文件</li>
<li>-c 创建新的tar归档文件</li>
<li>-r 追加文件到tar文件末尾</li>
<li>-x 从tar文件中提取文件</li>
<li>-C 切换到指定目录</li>
<li>-f 输出结果到文件或设备</li>
<li>-j 将输出重定向为bzip2</li>
<li>-z 将输出重定向给gzip</li>
<li>-p保留所有文件权限</li>
<li>-v 处理文件时显示文件</li>
</ul>
</li>
</ul>
<p>实例：</p>
<pre><code>//解压.tgz
tar -zxvf filename.tgz
</code></pre><ul>
<li><code>ln</code> <em>option source_file dist_file</em> <ul>
<li>-b 覆盖已有的链接</li>
<li>-f 强制执行</li>
<li>-i 交互模式，提示是否覆盖等</li>
<li>-n 把符号链接视为一般目录</li>
<li>-s 软链接（即符号链接）</li>
<li>-v 显示详细过程</li>
</ul>
</li>
</ul>
<h3 id="进程和设备管理"><a href="#进程和设备管理" class="headerlink" title="进程和设备管理"></a>进程和设备管理</h3><ul>
<li><code>ps</code> 检测进程<ul>
<li>-A 显示所有进程</li>
<li>-e 显示所有进程</li>
<li>-p <em>pidlist</em> 显示指定pid的进程</li>
<li>-f 显示完整格式的输出</li>
<li>-F 显示更多额外输出（相对-f而言）</li>
<li>-l 显示长列表</li>
<li>-L 显示进程中的线程</li>
<li>-H 用层级格式显示进程</li>
<li>–forest 图表形式显示层级信息</li>
</ul>
</li>
<li><code>top</code> 实时显示进程信息，<strong>很有用</strong>，详见man</li>
<li><code>pgrep</code> <em>pattern</em> 获取进程id</li>
<li><code>kill</code> <em>pid</em> 结束进程（默认发送TERM信号）<ul>
<li>-s <em>signal</em> 发送其他信号</li>
</ul>
</li>
<li><code>killall</code> <em>name</em> 通过进程名结束进程</li>
<li><p><code>mount</code> 挂载媒体设备，详见man<br>实例：</p>
<pre><code>//挂载iso文件
mount -t iso9660 -o loop file_name.iso /path/to/
</code></pre></li>
<li><p><code>unmonut</code> 卸载设备</p>
<blockquote>
<p>当提示设备繁忙无法卸载设备时可使用<code>lsof</code>命令获得使用它的进程信息</p>
</blockquote>
</li>
<li><code>df</code> 查看已挂载磁盘的使用情况<ul>
<li>-h human-readable</li>
</ul>
</li>
<li><code>du</code> 显示当前目录下所有文件、目录、子目录占用的磁盘块数<ul>
<li>-c 显示所有已列出文件的总大小</li>
<li>-h human-readable</li>
<li>-s 显示每个输出参数的总计</li>
</ul>
</li>
</ul>
<h3 id="系统和权限"><a href="#系统和权限" class="headerlink" title="系统和权限"></a>系统和权限</h3><ul>
<li><code>set</code> 显示进程的所有环境变量</li>
<li><code>export</code> <em>var</em> 将局部变量导出为全局变量</li>
<li><code>unset</code> <em>var</em> 删除环境变量</li>
<li><p><code>alias</code> 设置命令别名</p>
<ul>
<li><p>-p 显示已有的别名列表<br>实例：</p>
<p>  //定义命令别名<br>  alias li=’ls -il’</p>
</li>
</ul>
</li>
<li><p><code>useradd</code> 创建用户</p>
<ul>
<li>-c <em>comment</em> 添加备注</li>
<li>-d <em>home_dir</em> 为主目录指定一个名字（默认即home）</li>
<li>-D <em>YYYY-MM-DD</em> 显示设置用户的系统默认值</li>
<li>-g <em>initial_group</em> 指定用户登录组的GID或组名</li>
<li>-G <em>group</em> 指定除登录组外的附加组</li>
<li>-k 与-m一起使用，将/etc/skel目录的内容复制到HOME目录，（bash shell的标准启动文件）</li>
<li>-m 创建HOME目录</li>
<li>-r 创建系统用户</li>
<li>-p <em>passwd</em> 指定默认密码</li>
<li>-s <em>shell</em> 指定默认登录shell</li>
<li>-u <em>uid</em> 为账户指定唯一的uid</li>
</ul>
</li>
<li><code>userdel</code> 删除用户（默认只删除/etc/passwd文件中的用户信息）<ul>
<li>-r 删除HOME目录和mail目录</li>
</ul>
</li>
<li><code>usermod</code> 修改用户信息，参数与useradd基本相同<ul>
<li>-l 修改用户登录名</li>
<li>-L 锁定账户，无法登录</li>
<li>-p 修改账户密码</li>
<li>-U 解除锁定</li>
<li>-G <em>groupname username</em> 将用户添加至组</li>
</ul>
</li>
<li><code>groupadd</code> 添加新组</li>
<li><code>umask</code> 设置默认权限（掩码）</li>
<li><code>chmod</code> 设置文件和目录权限<ul>
<li>+r 添加读取权限</li>
<li>+w 写入权限</li>
<li>+x 执行权限</li>
</ul>
</li>
<li><code>chown</code> <em>optoins owner[.group] filename</em> 改变文件的属主<ul>
<li>-h 改变文件的所有符号连接的所属关系</li>
<li>-R 递归</li>
</ul>
</li>
<li><code>chgrp</code> 改变文件或目录的默认属组</li>
</ul>
<h2 id="脚本实战"><a href="#脚本实战" class="headerlink" title="脚本实战"></a>脚本实战</h2><blockquote>
<p>shell脚本常见以<code>#!</code>开头，这玩意叫做·<code>shebang</code></p>
</blockquote>
<h3 id="终端打印"><a href="#终端打印" class="headerlink" title="终端打印"></a>终端打印</h3><p>echo是用于终端打印的基本命令。默认情况下每次调用echo后都会添加一个换行符。<br>常用参数：</p>
<ul>
<li>-e 识别转义序列</li>
<li>-n 不追加换行符</li>
</ul>
<p>使用转义序列生成彩色输出：</p>
<pre><code>#红色文本
echo -e &quot;this is \e[1;31m red text \e[0m&quot;
#绿色背景
echo -e &quot;this is \e[1;42m green background \e[0m&quot;&quot;
</code></pre><p>文本颜色：重置=0；黑色=30；红色=31；绿色=32；黄色=33；蓝色=34；洋红=35；青色=36；白色=37；<br>背景颜色：重置=0；黑色=40；红色=41；绿色=42；黄色=43；蓝色=44；洋红=45；青色=46；白色=47；</p>
<h3 id="变量和环境变量"><a href="#变量和环境变量" class="headerlink" title="变量和环境变量"></a>变量和环境变量</h3><p>获取某个进程运行时的环境变量：</p>
<pre><code># $PID为摸个进程的id，可用pgrep命令获取
cat /proc/$PID/environ
</code></pre><p>为变量赋值时使用<code>var=value</code>的格式，而不是<code>var = value</code>，后者是相等操作。另外，如果value包含空格，则应使用引号将value括起。</p>
<p>添加环境变量：</p>
<pre><code>export PATH=&quot;$PATH:/path/to/sp&quot;
</code></pre><p>获取字符串长度：</p>
<pre><code>echo ${#var}
</code></pre><p>获取当前使用的shell：</p>
<pre><code>echo $SHELL #/bin/bash
echo $0 #-bash
</code></pre><p>一种shell参数扩展形式：</p>
<pre><code>${paramater:+expression} #若paramater有值且不为空则使用expression的值
</code></pre><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><p>几种整数运算的格式：</p>
<pre><code>no1=2;
no2=3;
let result=no1+no2
result=$[$no1+$no2] #变量前可以不加$
result=$(($no1+$no2)) #变量前可以不加$
</code></pre><p>还可以使用bc工具进行更高级的运算。</p>
<pre><code>echo &quot;sqrt(250)&quot; | bc #开方
</code></pre><h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><p><code>alias</code>的作用只是暂时的，关闭当前终端后定义的别名将失效。可将定义放在<code>.bashrc</code>中。例如：</p>
<pre><code>echo &apos;alias rm=&quot;cp $@ ~/backup &amp;&amp; rm $@&quot;&apos; &gt;&gt; ~/.bashrc
</code></pre><p>上面的指令为rm创建了一个别名，原有的rm将被这个新rm替换。<br>若想不使用别名而使用原本的命令，可用<code>\</code>进行转义。如：</p>
<pre><code>\rm
</code></pre><p>就是使用原本的rm指令而不是自己定义的别名。</p>
<p>### </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[超老本子CF-W2安装lubuntu]]></title>
      <url>http://www.upwzr.com/2016/03/04/refresh-old-laptop/</url>
      <content type="html"><![CDATA[<h2 id="祭出大杀器CF-W2"><a href="#祭出大杀器CF-W2" class="headerlink" title="祭出大杀器CF-W2"></a>祭出大杀器CF-W2</h2><p>前几年亲戚去日本出差给我老爸带回来一台二手本本，2003年左右的机器，质量确实过硬，没换过一个零件。。奔腾M 1GHz + 760MB内存，用xp勉强可以看个新闻玩玩同城游戏。到我手里后，实在是食之无味弃之可惜，索性装个linux敲代码好了。</p>
<h2 id="老机器真蛋疼"><a href="#老机器真蛋疼" class="headerlink" title="老机器真蛋疼"></a>老机器真蛋疼</h2><p>轻量级的linux有不少，<code>lubuntu</code> <code>xubuntu</code> <code>PuppyLinux</code>这些都是很常见的了。<code>lubuntu</code>号称256M内存就能跑起来，<code>LXDE</code>也比puppy用的<code>JVM</code>好看一点（私人观点），那就先搞这个试试（15.04）。最开始做了个U盘启动盘，结果BIOS里死活读不出usb，只好又刻了个CD。<br>lubuntu在12.04开始需要cpu支持pae，幸运的是我这老古董貌似完全不支持，因此在进入到grub后光标移动到install lubuntu选项，F6然后esc，进入编辑，在最后面加入<code>forcepae</code>,最后大概是下面这样的：</p>
<pre><code>Boot Options file=/cdrom/preseed/ubuntu.seed boot=casper initrd=/casper/initrd.lz quiet splash -- forcepae
</code></pre><p>这么改完后可以正常启动安装。<strong>安装过程语言最好选择English</strong>，不然后面会出现乱码，完全辨认不出选项。</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="显卡问题"><a href="#显卡问题" class="headerlink" title="显卡问题"></a>显卡问题</h3><p>除了开机有（chao）些（ji）慢，编译有（shi）些（fen）慢，总体上还是非常流畅的。不过每次开机后桌面壁纸会变成一坨颜色。在官方wiki上找到了应对老Intel显卡的处理办法。</p>
<pre><code>sudo vim /etc/X11/xorg.conf
</code></pre><p>添加如下语句：</p>
<pre><code>Section &quot;Device&quot;
    Identifier &quot;Intel Graphics&quot;
    Driver &quot;intel&quot;
    Option &quot;AccelMethod&quot; &quot;uxa&quot;
EndSection
</code></pre><p>重启X，问题解决。</p>
<h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>安装过程中如果选择中文会出现乱码，安装好之后的系统人类基本无法操作。不过update完了之后问题即可解决。建议用英文安装好，update完事再切换中文。</p>
<blockquote>
<p>相关链接<br><a href="https://wiki.ubuntu.com/Lubuntu/AdvancedMethods" target="_blank" rel="external">AdvancedMethods</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kali的一些工具]]></title>
      <url>http://www.upwzr.com/2015/12/19/tools-of-kali/</url>
      <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="DNS信息"><a href="#DNS信息" class="headerlink" title="DNS信息"></a>DNS信息</h3><ul>
<li>host 查询/etc/resolv.conf中指定的DNS服务器 </li>
<li>dig 可处理文件内的所有DNS指令</li>
<li>dnsenum 可通过google搜素子域名；课使用字典对子域名进行暴力破解；</li>
<li>dnsdict6 IPv6子域名枚举</li>
<li>fierce 能对不连续的IP空间和主机名进行测试</li>
<li>DMitry 具有DNS分析和路由分析功能，可进行简单端口探测</li>
<li>Maltego 图形化综合工具</li>
</ul>
<h3 id="路由信息"><a href="#路由信息" class="headerlink" title="路由信息"></a>路由信息</h3><ul>
<li>tcptraceroute 利用TCP SYN数据包进行路由信息探测</li>
<li>tctrace -i<device> -h<targethost></targethost></device></li>
</ul>
<h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><ul>
<li>theharvester 通过多个公共资源搜集所需信息（Email、用户名、主机名等）</li>
<li>Metagoofil 通过google搜索目标域的文件的元数据信息，kali2默认貌似没有安装</li>
</ul>
<h2 id="目标识别"><a href="#目标识别" class="headerlink" title="目标识别"></a>目标识别</h2><h3 id="识别主机"><a href="#识别主机" class="headerlink" title="识别主机"></a>识别主机</h3><ul>
<li>ping 老朋友。。</li>
<li>ping6 用来ping IPv6</li>
<li>fping 可同时探测多个主机或者整个网段</li>
<li>arping 使用ARP请求检测局域网内主机是否在线，IP或者MAC地址都可作为目标</li>
<li>hping3 端口扫描、防火墙规则检测、IDS检测等，功能强大</li>
<li>nping 支持多种协议探测模式；可做压力测试、ARP中毒、Dos攻击</li>
<li>nbtscan 审计局域网内windows系统IP地址、NetBIOS信息等</li>
</ul>
<h3 id="识别操作系统"><a href="#识别操作系统" class="headerlink" title="识别操作系统"></a>识别操作系统</h3><ul>
<li>p0f 被动方式探测目标主机</li>
<li>nmap 神器之一</li>
</ul>
<h2 id="服务枚举"><a href="#服务枚举" class="headerlink" title="服务枚举"></a>服务枚举</h2><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><ul>
<li>nmap 端口扫描；主机探测；服务/版本检测；操作系统检测；网络路由跟踪；脚本引擎<ul>
<li>-sT TCP连接扫描</li>
<li>-sS SYN扫描（半开连接扫描）</li>
<li>-sN NULL扫描（不设置任何控制位）</li>
<li>-sF FIN扫描</li>
<li>-sM TCP Maimom扫描，常用于探测BSD衍生出来的操作系统</li>
<li>-sA TCP ACK扫描，能检测防火墙，确定定被屏蔽端口</li>
<li>-sW TCP窗口扫描</li>
<li>-sI 通过僵尸主机发动扫描</li>
<li>–scanflags 自定义URG、ACK、PSH、RST、SYN、FIN、ECE、CWR、ALL和NONE组合</li>
<li>-sU UDP扫描</li>
<li>-sV 服务版识别</li>
<li>-O 识别操作系统</li>
<li>-p 指定端口或端口范围</li>
<li>-F 快速扫描，近扫描常用100个端口</li>
<li>-r 顺序扫描</li>
<li>-oN 正常输出</li>
<li>-oX 将结果生成为XML文件</li>
<li>-A 强力扫描，相当于 -sV -O -sC –traceroute</li>
<li>-sC 使用默认类的脚本进行扫描 相当于–script=default</li>
<li>–script 根据指定文件名、类别名、目录名执行相应脚本</li>
<li>-f 使用小数据包，避免目标IDS识别</li>
<li>–mtu 调整数据包大小，必须是8的倍数</li>
<li>-D 在侦测数据包中掺杂一些假源IP的数据包。</li>
<li>-g 模拟源端口</li>
<li>–data-length 改变数据包默认长度</li>
<li>–scan-delay 控制发送探测数据的时间间隔</li>
</ul>
</li>
<li>Unicornscna 扫描UDP端口性能卓越</li>
<li>zenmap nmap的图形化扫描工具</li>
<li>amap 检测指定端口上运行的应用程序信息</li>
</ul>
<h3 id="SNMP枚举"><a href="#SNMP枚举" class="headerlink" title="SNMP枚举"></a>SNMP枚举</h3><blockquote>
<p>SNMP 简单网络管理协议，运行于161端口的应用层协议，用于网络设备运行状态的监控，<br>SNMP协议有三个版本v1/v2/v3</p>
</blockquote>
<ul>
<li>onesixytone 扫描设备是否支持某些特定SNMP字符串</li>
<li>snmpcheck 差不多</li>
<li>SNMP Walk 强大的SNMP信息采集工具，可以使用三个版本的协议</li>
</ul>
<h3 id="VPN枚举"><a href="#VPN枚举" class="headerlink" title="VPN枚举"></a>VPN枚举</h3><ul>
<li>ike-scan 探测IPSec VPN系统</li>
</ul>
<h2 id="漏洞映射"><a href="#漏洞映射" class="headerlink" title="漏洞映射"></a>漏洞映射</h2><h3 id="模糊分析"><a href="#模糊分析" class="headerlink" title="模糊分析"></a>模糊分析</h3><ul>
<li>BED 检测缓冲区溢出、格式化字符串漏洞、整数溢出、DoS条件等漏洞，支持多种协议</li>
<li>JBroFuzz 模拟HTTP/HTTPS请求；XSS、SQl注入、缓冲区溢出、格式字符串错误等测试</li>
</ul>
<h3 id="SMB分析"><a href="#SMB分析" class="headerlink" title="SMB分析"></a>SMB分析</h3><blockquote>
<p>SMB Server Message Block，又称为CIFS（Common Internet File System）协议，作用<br>于应用层，常用于文件与打印机共享服务。NetBIOS是SMB协议的组成部分。DEC<br>/RPC服务程序实现的网络节点间跨进程通信（IPC）也使用SMB协议。</p>
</blockquote>
<ul>
<li>ImpacketSamrdump 列举同一局域网目标主机上所有系统共享、用户账户等信息</li>
</ul>
<h3 id="数据库评估"><a href="#数据库评估" class="headerlink" title="数据库评估"></a>数据库评估</h3><ul>
<li>sqlmap 又一个神器，详情看文档</li>
<li>sqlninja 专门评估SQL Server的进阶工具，配置较复杂。</li>
</ul>
<h3 id="Web应用程序评估"><a href="#Web应用程序评估" class="headerlink" title="Web应用程序评估"></a>Web应用程序评估</h3><ul>
<li>Burp Suite 还是一神器，完整的攻击框架。</li>
<li>Nikto2 支持跨平台部署、SSL、多种IDS规避技术</li>
<li>Paros Proxy 主动/被动评估工具</li>
<li>W3AF 识别、审计、攻击，有丰富的插件和exploits。</li>
<li>wafw00f 检测防web防火墙（WAF）的脚本</li>
<li>webscarab 集成了众多工具，OWASP Project之一，功能强大</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kali下Metasploit学习笔记]]></title>
      <url>http://www.upwzr.com/2015/12/07/metasploit-on-kali/</url>
      <content type="html"><![CDATA[<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>使用框架前先开启其几个服务：</p>
<pre><code># service postgresql start
# msfdb init
</code></pre><p>注意kali2.0开始不再有metasploit服务，所以官方文档说要用<code>msfdb init</code>代替<code>service metasploit start</code></p>
<p>然后启动msf控制台</p>
<pre><code># msfconsole
</code></pre><h2 id="一些命令"><a href="#一些命令" class="headerlink" title="一些命令"></a>一些命令</h2><p>workspace -h 帮助<br>workspace [-a/d/r] 创建/删除/重命名工作平台</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下curl实现某资源站自动签到脚本]]></title>
      <url>http://www.upwzr.com/2015/12/06/curl-on-linux-for-autoregistering/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常去某资源站下载美剧，我很喜欢的的团(ren)队(ren)在运营这个网站，资源很及时也很好。网站要求登录才能看到下载链接。连续登录达到多少天就可以升级并且可以查看更多下载资源。然而我这种人是不可能记着每天都去网站上签到的(-&lt;-)。。。正好最近买了vps，于是决定自己写一个自动登录的脚本。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>Fiddler抓包发现此网站登陆时url为/User/Login/ajaxLogin，post提交用户名和密码。</p>
<p><img src="/img/2015-12-04-zimuzu-auto-login_1.png" alt="img"></p>
<p>登录成功之后返回JSON字符串</p>
<p><img src="/img/2015-12-04-zimuzu-auto-login_3.png" alt="img"></p>
<p>用户等级等相关信息是通过之后的两个请求<code>hotkeyword``getCurUserTopInfo</code>获取的，用于网站顶部的信息和搜索栏。</p>
<p><img src="/img/2015-12-04-zimuzu-auto-login_4.png" alt="img"></p>
<p><img src="/img/2015-12-04-zimuzu-auto-login_5.png" alt="img"></p>
<p><img src="/img/2015-12-04-zimuzu-auto-login_6.png" alt="img"></p>
<p>通过我的测试发现这两个请求并不会影响cookie的变化，不模拟也完全没问题。</p>
<p>签到页面url为/user/sign,签到按钮通过js控制15s后才可以点击，点击后fiddler抓到了/user/sign/dosign的请求，request包里面看起并没有什么新内容，response返回了一个json</p>
<p><img src="/img/2015-12-04-zimuzu-auto-login_7.png" alt="img"></p>
<p><img src="/img/2015-12-04-zimuzu-auto-login_8.png" alt="img"></p>
<p>json里面的info表示签到结果，1为成功。data为连续签到天数。</p>
<h2 id="开搞"><a href="#开搞" class="headerlink" title="开搞"></a>开搞</h2><p>OK！开始祭出杀气<strong>curl</strong>，一开始是用的php，但是向dosign发送请求总是返回错误状态，可能是那里的curl参数配置错了，找个时间再回过头去看一下。。就不说这个了。</p>
<p>后来决定干脆直接上linux写脚本。我水平比较low。。就是简单的3个请求，存一下cookie，也没搞啥复杂东西。</p>
<p><img src="/img/2015-12-04-zimuzu-auto-login_9.png" alt="img"></p>
<p>先简单在本地测试了一下</p>
<p><img src="/img/2015-12-04-zimuzu-auto-login_10.png" alt="img"></p>
<p><img src="/img/2015-12-04-zimuzu-auto-login_11.png" alt="img"></p>
<p>哈哈，大功告成！！</p>
<p>最后把脚本丢到了vps上跑，crontab添加一条定时任务，每天凌晨啪啪啪~~ 麻麻再也不用担心我的签到~~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vi/vim命令简记]]></title>
      <url>http://www.upwzr.com/2015/12/05/vim-guide/</url>
      <content type="html"><![CDATA[<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>vi有三种模式</p>
<ul>
<li>命令模式</li>
<li>插入模式</li>
<li>扩展模式</li>
</ul>
<h2 id="命令模式下的操作"><a href="#命令模式下的操作" class="headerlink" title="命令模式下的操作"></a>命令模式下的操作</h2><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><ul>
<li>h,j,k,l  左下上右</li>
<li>w/d 上一个字符/下一个字符</li>
<li>(/) 上一个句子/下一个句子</li>
<li>{/} 上一个段落/下一个段落</li>
</ul>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul>
<li>cc/cw/cl 重写行/词/字符</li>
<li>dd/dw/dl 删除行/词/字符</li>
<li>yy/yw/yl 复制行/词/字符</li>
<li>dtc，删除从光标到c之间的所有字符</li>
<li>rc，将光标下的字符替换为c</li>
<li>5dd，删除5行数据</li>
<li>5yy，复制5行数据</li>
<li>5x，删除5个字符</li>
<li>p/P 粘贴复制修改或者删除的数据，p粘贴在行上，P粘贴在行下</li>
</ul>
<h3 id="撤销和恢复"><a href="#撤销和恢复" class="headerlink" title="撤销和恢复"></a>撤销和恢复</h3><ul>
<li>u 撤销最近一次修改</li>
<li>ctrl+r 撤销最近一次撤销</li>
<li>U 撤销所有修改</li>
</ul>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><ul>
<li>/text 向后搜索</li>
<li>?text 向前搜索</li>
<li>n 搜索下一个同样的的内容</li>
<li>N 搜索上一个同样内容</li>
<li>R，进入替换状态，esc退出</li>
</ul>
<h2 id="读取，保存与退出"><a href="#读取，保存与退出" class="headerlink" title="读取，保存与退出"></a>读取，保存与退出</h2><p>读取保存退出这些操作都是在扩展模式下操作。</p>
<ul>
<li>:w 保存</li>
<li>:w! 强制保存</li>
<li>:q 退出</li>
<li>:q! 强制退出</li>
<li>:wq 保存退出</li>
<li>:wq! 强制保存退出</li>
<li>:r filename 将另一个文件读入到当前文件内光标所在位置后</li>
<li>:1,20 w filename 将1-20行写入新文件中</li>
<li>:29,$ w filename 将第20行至最后一行写入新文件</li>
<li>:1,20 w&gt;&gt;filename 将第1值20行追加到另一个文件中</li>
</ul>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><ul>
<li>G 跳转到文件最后一行</li>
<li>1G 跳转到文件的第一行</li>
<li>ctrl-d 往下滚动半屏</li>
<li>ctrl+u 往上滚动半屏</li>
<li>H 跳转到本屏显示的第一行</li>
<li>M 调转到本屏显示的中间一行</li>
<li>L 跳转到本屏显示的最后一行</li>
<li>z+Enter 使当前的行成为屏幕显示的第一行</li>
<li>z- 使当前行成为屏幕的最后一行</li>
</ul>
<h2 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h2><h3 id="使用sed进行查找和替换"><a href="#使用sed进行查找和替换" class="headerlink" title="使用sed进行查找和替换"></a>使用sed进行查找和替换</h3><p>sed是linux下一个很常用的工具。在扩展模式下输入s即可使用sed进行替换。</p>
<ul>
<li>s/a/b 将光标之后的第一个a替换成b</li>
<li>s/a/b/g 将光标所在行的全部a替换成b</li>
<li>1,10s/a/b/g 将第1行到第10行的a全部替换成b，不加/g就是替换每行的第一个a</li>
<li>1,$s/a/b/g 将文件所有a替换成b</li>
</ul>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ul>
<li>:set 显示常用配置选项</li>
<li>:set all 显示所有配置选项</li>
<li>:set number 显示行号</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vps搭建私人pptp vpn,新姿势GET！]]></title>
      <url>http://www.upwzr.com/2015/12/01/my-personal-pptp-vpn-on-vps/</url>
      <content type="html"><![CDATA[<p>一直用hosts和goagent的姿势搞学(ke)术(xue)研(shang)究(wang)，苦于两种方式限制颇多不稳定又不安全。不久前咬牙花了5刀开了DO的vps（当然，DO赠送了10刀回来），穷学生一枚的我终于能换换新姿势了，直接动手搭建了vpn。由于本人不太喜欢用额外的客户端，再加上pptp以简单著称，我决定采用pptp server。</p>
<h2 id="DigitalOcean购买VPS"><a href="#DigitalOcean购买VPS" class="headerlink" title="DigitalOcean购买VPS"></a>DigitalOcean购买VPS</h2><p>在网上查了大家的经验攻略，自己看了下DO、搬瓦工、bugdetVM，最后还是选了DO，反正现在感觉速度很不错，挺满意的。</p>
<p>这个流程很简单，在官网上注册账号，用PayPal下个5刀的订单，DO会赠送10美元回来。Paypal支持银联的卡，我就是用建行的借记卡支付的。支付完成后按照流程创建Droplet，我用的ubuntu14.04 x64,旧金山的服务器，创建过程中添加SSH,用puttyputtygen即可。具体内容在下面相关链接。</p>
<h2 id="安装pptp和配置"><a href="#安装pptp和配置" class="headerlink" title="安装pptp和配置"></a>安装pptp和配置</h2><p>putty登陆，速度可以，直接开始安装。这期间我试了试DO网站上的console，感觉不好用。还是putty方便。</p>
<pre><code># sudo apt-get update
# sudo apt-get install pptpd
</code></pre><p>事实证明我朝GFW有多坑，服务器在美国的ubuntu从官方源下载速度炒鸡快，瞬间完事儿。</p>
<h3 id="修改pptp配置"><a href="#修改pptp配置" class="headerlink" title="修改pptp配置"></a>修改pptp配置</h3><p>修改/etc/pptpd.cong文件</p>
<pre><code># sudo nano /etc/pptpd.conf
</code></pre><p>在末尾添加server IP 和 client IP</p>
<pre><code>localip 192.168.0.1
remoteip 192.168.0.100-200
</code></pre><p>这里用的是nano编辑器，不熟悉的同学（比如我）可以参见相关链接里面的“Linux下的Nano命令”。其实用不到啥。。就是一个保存和退出而已。。nano还是比较简单的。</p>
<h3 id="修改DNS配置"><a href="#修改DNS配置" class="headerlink" title="修改DNS配置"></a>修改DNS配置</h3><pre><code># sudo nano /etc/ppp/pptpd-options
</code></pre><p>添加google的DNS</p>
<pre><code>ms-dns 8.8.8.8
ms-dns 8.8.4.4
</code></pre><p>这个文件里还开启了其他的一些选项，课根据需要开启我从别的大神那里复制来了一些资料：</p>
<blockquote>
<p>name pptpd（pptpd服务名，可以随便填写。）<br>refuse-pap（拒绝pap身份认证模式。）<br>refuse-chap（拒绝chap身份认证模式。）<br>refuse-mschap（拒绝mschap身份认证模式。）<br>require-mschap-v2（在端点进行连接握手时需要使用微软的 mschap-v2 进行自身验证。）<br>require-mppe-128（MPPE 模块使用 128 位加密。）<br>ms-dns 8.8.8.8 (ppp 为 Windows 客户端提供 DNS 服务器 IP 地址。)<br>proxyarp (建立 ARP 代理键值。)<br>nodefaultroute（不替换默认路由）<br>debug（开启调试模式，相关信息记录在 /var/logs/message 中。现在默认是被注释掉的。）<br>lock（锁定客户端 PTY 设备文件。）<br>nobsdcomp (禁用 BSD 压缩模式。)</p>
</blockquote>
<h3 id="添加VPN用户"><a href="#添加VPN用户" class="headerlink" title="添加VPN用户"></a>添加VPN用户</h3><p>打开chap-secrets文件添加用户</p>
<pre><code># sudo nano /etc/ppp/chap-secrets
</code></pre><p>第一行是文件里已经存在的注释</p>
<pre><code># client        server  secret                  IP addresses
username * myPassword *
</code></pre><p>第一段和第三段字符串就不用说了吧，第二段是服务器名称，默认的是pptpd，也就是上面pptpd-options的<code>name</code>选项的值。最后一段是登陆的ip，*即可。</p>
<p>到这里可以重启下pptpd</p>
<pre><code># /etc/init.d/pptpd restart
</code></pre><h3 id="设置路由转发"><a href="#设置路由转发" class="headerlink" title="设置路由转发"></a>设置路由转发</h3><h3 id="开启IPv4转发"><a href="#开启IPv4转发" class="headerlink" title="开启IPv4转发"></a>开启IPv4转发</h3><p>打开sysctl.conf</p>
<pre><code># sudo nano /etc/sysctl.conf
</code></pre><p>开启IPv4转发选项，即取消下面语句的注释</p>
<pre><code>net.ipv4.ip_forward=1
</code></pre><p>刷新下配置文件</p>
<pre><code># sudo sysctl -p
</code></pre><h3 id="设置iptables-NAT转发和MTU"><a href="#设置iptables-NAT转发和MTU" class="headerlink" title="设置iptables NAT转发和MTU"></a>设置iptables NAT转发和MTU</h3><p>打开rc.local</p>
<pre><code># sudo nano /etc/rc.local
</code></pre><p>把这两个配置添加到这里可以保证重启有效，否则重启系统之后iptables的配置会重置。注意要添加到<code>exit 0</code>上面</p>
<pre><code>iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE
iptables -A FORWARD -p tcp --syn -s 192.168.0.0/24 -j TCPMSS --set-mss 1356
</code></pre><p>第一句话设置NAT转发，我使用了192.168.0网段，这里要根据自己上面的配置修改。<code>eth0</code>就是vps的网卡，如果不确定可以用ifconfig确认。</p>
<p>第二句话设置MTU包大小，防止有较大包时发生数据丢失。</p>
<p>到现在所有的配置已经完成了。在自己电脑上连接上vpn，直接上油管测试，视频基本秒开。</p>
<p>好，接下来就用此姿势玩耍了，麻麻再也不用担心我的那啥了%_%</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><blockquote>
<p><a href="https://help.ubuntu.com/community/PPTPServer" target="_blank" rel="external">ubuntu官网PPTPServer帮助</a><br><a href="http://www.cnblogs.com/haichuan3000/articles/2125943.html" target="_blank" rel="external">Linux下的nano命令</a>&gt;</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[asp.net网站搭常见问题]]></title>
      <url>http://www.upwzr.com/2015/11/29/website-on-iis/</url>
      <content type="html"><![CDATA[<h2 id="IIS-APPPOOL-xxxx-登录失败"><a href="#IIS-APPPOOL-xxxx-登录失败" class="headerlink" title="IIS APPPOOL/xxxx 登录失败"></a>IIS APPPOOL/xxxx 登录失败</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL字符串转换成时间]]></title>
      <url>http://www.upwzr.com/2015/11/16/SQL-string-to-date/</url>
      <content type="html"><![CDATA[<p>最近改一个网站，网站的文章顺序总是很奇怪，看代码明明是<code>order by time desc</code>。看了数据库之后发现time列是字符串格式，导致比较的时候2015/11/2会被认为比2015/11/15大。查了一下后将sql语句改为<code>.......order by cast([time] as date) desc</code> 就解决了问题。</p>
<p>SQL Server支持的两个转换函数：</p>
<pre><code>CAST ( expression AS data_type [ ( length ) ] )

CONVERT ( data_type [ ( length ) ] , expression [ , style ] )
</code></pre><p>还有几个其他的转换函数，详细内容请见相关链接。</p>
<blockquote>
<p><strong>相关链接</strong><br><a href="https://msdn.microsoft.com/zh-cn/library/bb630352(v=sql.120" target="_blank" rel="external">date (Transact-SQL) - MSDN - Microsoft</a>.aspx)<br><a href="https://msdn.microsoft.com/zh-cn/library/ms187928(v=sql.120" target="_blank" rel="external">CAST 和 CONVERT (Transact-SQL)</a>.aspx)</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[x86架构寄存器功能简记]]></title>
      <url>http://www.upwzr.com/2015/11/13/x86-cpu-registers/</url>
      <content type="html"><![CDATA[<p>注意：64位系统中或者64位程序调试时eip寄存器的名称为rip</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C#学习笔记]]></title>
      <url>http://www.upwzr.com/2015/10/31/c-sharp-notes/</url>
      <content type="html"><![CDATA[<p>这里记录的都是与c/c++不太一样的地方，</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><p>从类System.ValueType中派生，比较独特的有<code>decimal``sbyte</code>;<br>C#提供了内置类型转换的方法，例如<code>ToBoolean``ToInt32``ToString</code>等等。</p>
<h3 id="可空类型-Nullable"><a href="#可空类型-Nullable" class="headerlink" title="可空类型(Nullable)"></a>可空类型(Nullable)</h3><p>这个单独列出来了因为很有趣，他是允许值为正常类型范围内或者是null。</p>
<pre><code>//语法
&lt;date_type&gt; ? &lt;variable_name&gt; = null;
int? num1 = null;
int? num2 = 250;
</code></pre><p>Null合并运算符<code>??</code>用于定义可空类型和引用类型的默认值；如果第一个操作数的侍卫null则返回第二个操作数，否则返回第一个操作数的值。</p>
<pre><code>//继续使用上面的num1和num2
int num3;
num3 = num1 ?? 10;//num3 = 10;
num3 = num2 ?? 38;//num3 = 250;
</code></pre><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>引用类型不包含储存在变量中的实际数据。内置的引用类型有<code>object``dynamic``string</code></p>
<ol>
<li><p>对象(object)类型<br>object类型是c#通用类型系统CTS中所有数据的终极基类，可以分配任何类型的值。一个值类型转换为对象类型时称为<strong>装箱</strong>，反过来称为<strong>拆箱</strong>;</p>
<pre><code>object obj；
obj = 100;//装箱
</code></pre></li>
<li><p>动态(Dynamic)类型<br>类型检查在运行时发生。</p>
<pre><code>dynamic a = 20;
</code></pre></li>
<li><p>字符串(String)类型<br><code>String</code>是System.String类的别名，从对象类派生。有一个<code>@</code>分配方式（称作逐字字符串）。</p>
<pre><code>String str1 = &quot;Hello world&quot;;
String str2 = @&quot;C:\Windows&quot;;//转义字符会当作普通字符看待
</code></pre></li>
</ol>
<p><code>@</code>字符串中所有的换行符缩进符等都计算在字符串长度内。</p>
<h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p>与c/c/c++有相同的类型；</p>
<pre><code>type* identifier;
</code></pre><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>C#中有三种参数传递方式：值参数、引用参数、输出参数。</p>
<p>引用参数：使用<code>ref</code>关键字声明引用参数。</p>
<pre><code>public void swap(ref int x, ref int y)
{
    //...
}
</code></pre><p>输出参数：这个比较特殊，可以使用这个来从函数中返回多个值，而return只能返回一个值。<br>这个需要一个实例来说明：</p>
<pre><code>using System;

namespace test
{
    class NumberTest
    {
        public void getValue(out int a,out int b)
        {
            int temp = 10;
            a = temp;
            b = temp*2;
        }

        static void Main(string[] args)
        {
            NumberTest n = new NummbrTest();
            int m,n;
            n.getValue(out m,out n);
            Console.WriteLine(m);
            Console.WriteLine(n);
            Console.Readkey();
        }
    }
}
</code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>数组也是引用类型，使用new来创建数组。</p>
<pre><code>double[] arr1 = new double[10];
double[] arr2 = new double[] {1,2,3,4,5};
double[] arr3 = arr2;//这时arr3与arr2指向相同的内存位置。
</code></pre><p>可以使用foreach循环来遍历数组元素。</p>
<pre><code>foreach(double i in arr2)
{
    //...
}
</code></pre><h3 id="交错数组"><a href="#交错数组" class="headerlink" title="交错数组"></a>交错数组</h3><p>说白了就是数组的数组。与多维数组的区别在于它是不规则的（不知道可不可以这么说）。</p>
<pre><code>int[][] marr = new int [2][] {new int{1,2,3},new int{4,5,6,7,8}};
</code></pre><h3 id="参数数组"><a href="#参数数组" class="headerlink" title="参数数组"></a>参数数组</h3><p>如果声明一个方法时不能确定需要传递多少个参数，参数数组就派上了用场。<br>使用数组作为形参时，C#提供了params关键字，使调用数组为形参的方法时既可以传递数组实参也可以直接出传递一组数组。<br>实例：</p>
<pre><code>//声明
public int forAverage(params int[] arr)
{
    //...
}

//调用
object.forAverage(1,2,3,4,5);//也可传递一数组名
</code></pre><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><p>动态数组基本上可以替代一个数组。但是动态数组允许使用索引在指定的位置添加和移除项目，动态数组会自动调整大小。也允许在内存中进行动态内存分配、增加、搜索、排序各项。<br>常用属性：</p>
<blockquote>
<p>Capacity - 获取或设置ArrayList可以包含的元素个数。<br>count - 获取ArrayList中实际包含的元素个数<br>item - 获取或设置指定索引处的元素</p>
</blockquote>
<p>常用方法：</p>
<blockquote>
<p>public virtual int Add(object value); 在ArrayList的末尾添加一个对象<br>public virtual void Insert(int index,object value); 在指定索引处插入一个元素<br>public virtual void Clear(); 移除所有元素</p>
</blockquote>
<h2 id="特性-Attribute"><a href="#特性-Attribute" class="headerlink" title="特性(Attribute)"></a>特性(Attribute)</h2><p>…</p>
<h2 id="反射-Reflection"><a href="#反射-Reflection" class="headerlink" title="反射(Reflection)"></a>反射(Reflection)</h2><p>…</p>
<h2 id="属性-Property"><a href="#属性-Property" class="headerlink" title="属性(Property)"></a>属性(Property)</h2><p>属性是类、结构和接口的命名成员。类或者结构中的成员变量或者方法称为域(Field)，而属性是域的扩展，使用访问器来读写和操作私有域。抽象域也可以有抽象属性。这些属性应该在派生类中被实现。</p>
<pre><code>private string code=&quot;foobar&quot;;

public string Code
{
    get
    {
        return code;
    }
    set
    {
        code = value;
    }
}
</code></pre><h2 id="索引器-Indexer"><a href="#索引器-Indexer" class="headerlink" title="索引器(Indexer)"></a>索引器(Indexer)</h2><p>…</p>
<h2 id="委托-Delegate"><a href="#委托-Delegate" class="headerlink" title="委托(Delegate)"></a>委托(Delegate)</h2><p>…</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>…</p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>…</p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[快速临时解决phpmyadmin上传sql文件大小限制问题]]></title>
      <url>http://www.upwzr.com/2015/10/29/phpmyadmin-upload-filesize-limit/</url>
      <content type="html"><![CDATA[<p>刚刚需要往服务器上导入数据库，服务器上的phpmyadmin有上传限制，最大是8192kb，我要导入的数据库压缩完了还有8300多。。不想对服务器配置做啥改动，不能远程登录mysql,脚本也不太好跑。查了一下原来phpmyadmin的上传限制是受php.ini和自己的config控制的，mysql控制台并不受影响。干脆直接从命令行导入好了。</p>
<pre><code>mysql&gt;use test;
mysql&gt;set names utf8;
mysql&gt;source D:/fuck.sql;
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开机流程中的事儿]]></title>
      <url>http://www.upwzr.com/2015/10/24/about-booting/</url>
      <content type="html"><![CDATA[<h2 id="一些基本概念"><a href="#一些基本概念" class="headerlink" title="一些基本概念"></a>一些基本概念</h2><h3 id="MBR分区表"><a href="#MBR分区表" class="headerlink" title="MBR分区表"></a>MBR分区表</h3><blockquote>
<p>MBR - Master Boot Record 主引导记录/主引导扇区</p>
</blockquote>
<p>MBR分区方案中硬盘的每个扇区通过32位二进制数逻辑块地址（LBA）来标识。计算机开机后访问硬盘时要先读取第一个扇区，这个扇区（通常有512bytes）储存着主引导记录MBR（446bytes）和分区表DPT（64bytes）。主引导记录中装有开机管理程序（boot loader），分区表中记录了磁盘分区情况。由于每一条分区记录需要16个字节，因此MBR分区结构只能支持4个主分区，想得到4个以上的分区需要采用扩展分区，注意扩展分区只能有一个，在windows系统中默认划分一个主分区给系统，其余的全部划入扩展分区。扩展分区可以划分出多个逻辑分区。<br><img src="/img/2015-10-23-about-booting_1.png" alt="img"></p>
<p>MBR的局限性在于，分区表大小固定，只能支持4个主分区，而且最大只能支持到2.2TB的分区容量。随着硬盘技术的发展，MBR分区方案有些撑不住了，再加上win8/8.1的催化，GPT分区表逐渐成为主流。</p>
<h3 id="GPT分区表"><a href="#GPT分区表" class="headerlink" title="GPT分区表"></a>GPT分区表</h3><blockquote>
<p>GPT - GUID Partition Table 全局唯一标识分区表</p>
</blockquote>
<p>有些硬盘厂商注意到了MBR分区方案的容量局限，就把容量较大的产品升级到了4KB的扇区，这样使得MBR可以支持最大到16TB,但同时带来了关于在有较大的块的设备从BIOS启动时，如何最佳的划分分区。GPT分区方案中LBA是64位2进制数，因此对于扇区为512bytes的硬盘，容量可以达到9.4ZB。。。<br>GPT表的最开头，有一块类似MBR的表头，称为PMBR，存有引导程序和一个特殊标识用来表示次硬盘使用GPT分区方式。接下来的LBA1是GPT的分区表头，记录了硬盘的可用空间和分区表项的大小和数目，还有备份分割的位置。GPT有34个LBA区块记录，从LBA2到LBA33每个区块都可以记录4条分区记录，每条记录都达到128bytes。</p>
<p><img src="/img/2015-10-23-about-booting_2.png" alt="img"></p>
<p>在一些MBR/GPT混合硬盘中，不同系统实现有些不一致，windows系统通常优先使用MBR。<br>再来一张windows的分区类型GUID<br><img src="/img/2015-10-23-about-booting_3.png" alt="img"></p>
<blockquote>
<p><strong>相关链接</strong><br><a href="https://zh.wikipedia.org/wiki/4K%E5%AF%B9%E9%BD%90" target="_blank" rel="external">4K对齐</a></p>
</blockquote>
<h3 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h3><blockquote>
<p>BIOS - Basic Input/Output System 基本输入输出系统</p>
</blockquote>
<p>BIOS是一种业界标准的固件接口，用于开机自检以及加载引导程序。BIOSB其实就是一个16位汇编代码，寄存器参数调用方式，静态链接，以及1MB以下内存固定编址形式的程序。现在的BIOS储存在主板上的只读储存器（EEPROM）或者是闪存（flash）中，可以更新也不怕断电了。</p>
<h3 id="CMOS"><a href="#CMOS" class="headerlink" title="CMOS"></a>CMOS</h3><blockquote>
<p>CMOS - Complementary Metal Oxide Semiconductor 互补金属氧化物半导体 (-.-)</p>
</blockquote>
<p>在计算机领域，CMOS就是一块重要的随机储存器（RAM），BIOS的所有信息都存在这里，最怕被抠电池。。</p>
<h3 id="EFI-UEFI"><a href="#EFI-UEFI" class="headerlink" title="EFI(UEFI)"></a>EFI(UEFI)</h3><blockquote>
<p>EFI - Extensible Firmware Interface 可扩展固件接口<br>UEFI - Unified Extensible Firmware Interface 统一可扩展固件接口</p>
</blockquote>
<p>UEFI是一种详细描述全新类型接口的标准，是适用于电脑的标准固件接口，旨在代替BIOS。UEFI通过C语言开发，拥有很多BIOS不具备的功能，比如图形化界面、多种多样的操作方式、允许植入硬件驱动程序（.efi）。</p>
<blockquote>
<p><strong>相关链接</strong><br><a href="http://www.uefi.org/" target="_blank" rel="external">UEFI官方首页</a><br><a href="http://drops.wooyun.org/binary/4788" target="_blank" rel="external">“暗云”bootkit木马详细技术分析</a></p>
</blockquote>
<h2 id="开机方式"><a href="#开机方式" class="headerlink" title="开机方式"></a>开机方式</h2><p>BIOS并不支持GPT，目前主要的开机方式无非BIOS+MBR引导和UEFI+GPT引导</p>
<h3 id="BIOS-MBR"><a href="#BIOS-MBR" class="headerlink" title="BIOS+MBR"></a>BIOS+MBR</h3><p>这种方式的流程大概为以下几步：</p>
<ol>
<li>BIOS加电，初始化芯片组和存储器子系统，将自己解压到系统主存中，读取CMOS中的配置信息，跳转到自检程序对系统进行自检。</li>
<li>根据CMOS中的储存设备读取顺序，BIOS将读取相应设备中的MBR，启动引导程序。此时BIOS的工作已经完成。</li>
<li>引导程序接受控制权开始工作。</li>
</ol>
<p>引导程序主要任务也不多，提供开机选单、载入核心档案和转交其他的boot loader。硬盘的每个分区都可以有一个开机磁区，boot loader除了可以安装在MBR中外也可以安装到开机磁区中。<br>假设一个采用MBR分区的硬盘装有Windows和Linux双系统，整个流程可以用下图表示：<br><img src="/img/2015-10-23-about-booting_4.png" alt="img"></p>
<blockquote>
<p><strong>安装Windows/Linux双系统最好先安装Windows的原因</strong></p>
<ul>
<li><p>Linux在安装的时候，你可以选择将开机管​​理程式安装在MBR或各别分割槽的开机磁区， 而且Linux的loader可以手动设定选单(就是上图的M1, M2…)<br>，所以你可以在Linux的boot loader里面加入Windows开机的选项；</p>
</li>
<li><p>Windows在安装的时候，他的安装程式会主动的覆盖掉MBR以及自己所在分割槽的开机磁区，你没有选择的机会， 而且他没有让我们自己选择选单的功能</p>
</li>
</ul>
</blockquote>
<h3 id="UEFI-GPT"><a href="#UEFI-GPT" class="headerlink" title="UEFI+GPT"></a>UEFI+GPT</h3><p>UEFI主要是依靠载入各种驱动程序来完成系统自检等工作，读取GPT分区表，载入系统。这楼里又要介绍一个ESP分区的概念。</p>
<h4 id="ESP分区"><a href="#ESP分区" class="headerlink" title="ESP分区"></a>ESP分区</h4><blockquote>
<p>ESP - EFI System partition</p>
</blockquote>
<p>ESP分区是一个FAT格式的系统分区，在windows系统下是不可见的，独立于操作系统之外。当操作系统被引导之后就不会在使用这个分区。因此一些系统级的维护工具以及数据非常适合存放在这里，比如boot loader，驱动程序，系统备份等等，甚至可以安装一个特殊的操作系统（PE）。</p>
<p>开机时UEFI将先读取照硬盘的ESP分区，通过这个分区中的引导文件进行系统引导。</p>
<p>UEFI添加了一个新的安全启动机制（secure boot），这个机制会验证即将启动的系统，通过验证系统才可以正常启动。这个机制为了解决的是黑客常用的rootkit攻击手段，但是同时也导致一些系统（包括Linux）不能正常启动。因此有时可能会需要关闭这个功能。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows Server 2008 r2学习笔记]]></title>
      <url>http://www.upwzr.com/2015/10/20/windows-server-2008-r2-notes/</url>
      <content type="html"><![CDATA[<h2 id="AD"><a href="#AD" class="headerlink" title="AD"></a>AD</h2><p>先扔到这里几个缩写</p>
<blockquote>
<p>AD DS - Active Dicretory Domain services<br>DC - Domain Controllers<br>OU -  Organizational Unit<br>GPO - Group Policy Object 组策略对象<br>GC - global catalog 全局编录<br>LDAP - Lightweight Directory Access Protocol 轻型目录访问协议<br>DN - distinguished name 可分辨名称<br>WSH - Windows Scripting Host Windows脚本宿主</p>
</blockquote>
<p>计算机在加入域的时候，会自动创建一个计算机账户。默认情况下该账户在Computer容器中，可通过redircmp命令修改这一设置。</p>
<pre><code>redircmp DN
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[哪里有春天]]></title>
      <url>http://www.upwzr.com/2015/10/16/a-mess/</url>
      <content type="html"><![CDATA[<p>此文已河蟹。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决jekyll server无法启动问题]]></title>
      <url>http://www.upwzr.com/2015/10/15/jekyll-server-failed/</url>
      <content type="html"><![CDATA[<p>前几天想要post新博客，照旧在本地测试效果，结果忽然发现jekyll server启动不了了<br><img src="/img/2015-10-15-jekyll-server-failed_1.png" alt="img"></p>
<p>目测是端口被占用，但是啥玩意会占用4000端口呢。。。netstat了下<br><img src="/img/2015-10-15-jekyll-server-failed_2.png" alt="img"></p>
<p>3608号进程在占用，继续查这个3608进程。。<br><img src="/img/2015-10-15-jekyll-server-failed_3.png" alt="img"><br>我勒个草，竟然是个福昕的保护程序。。没啥话可说了，现在就是在抉择是杀掉这个进程还是换个jekyll serve端口(&gt;=&lt;)先把这篇提交了再说</p>
<pre><code>$ jekyll serve --port 4001
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQL Server更改服务器身份验证模式]]></title>
      <url>http://www.upwzr.com/2015/10/09/SQL-Server-change-authentication-mode/</url>
      <content type="html"><![CDATA[<h2 id="使用-SQL-Server-Management-Studio"><a href="#使用-SQL-Server-Management-Studio" class="headerlink" title="使用 SQL Server Management Studio"></a>使用 SQL Server Management Studio</h2><h3 id="更改安全身份验证模式"><a href="#更改安全身份验证模式" class="headerlink" title="更改安全身份验证模式"></a>更改安全身份验证模式</h3><ol>
<li><p>在 SQL Server Management Studio 的对象资源管理器中，右键单击服务器，再单击“属性”。</p>
</li>
<li><p>在“安全性”页上的“服务器身份验证”下，选择新的服务器身份验证模式，再单击“确定”。</p>
</li>
<li><p>在 SQL Server Management Studio 对话框中，单击“确定”以确认需要重新启动 SQL Server。</p>
</li>
<li><p>在对象资源管理器中，右键单击您的服务器，再单击“重新启动”。如果运行有 SQL Server 代理，则也必须重新启动该代理。</p>
</li>
</ol>
<h3 id="启用-sa-登录名"><a href="#启用-sa-登录名" class="headerlink" title="启用 sa 登录名"></a>启用 sa 登录名</h3><ol>
<li><p>在对象资源管理器中，依次展开“安全性”、“登录名”，右键单击“sa”，再单击“属性”。</p>
</li>
<li><p>在“常规”页上，您可能需要为登录名创建密码并确认该密码。</p>
</li>
<li><p>在“状态”页上的“登录”部分，单击“启用”，然后单击“确定”</p>
</li>
</ol>
<h2 id="使用-Transact-SQL"><a href="#使用-Transact-SQL" class="headerlink" title="使用 Transact-SQL"></a>使用 Transact-SQL</h2><h3 id="启用-sa-登录名-1"><a href="#启用-sa-登录名-1" class="headerlink" title="启用 sa 登录名"></a>启用 sa 登录名</h3><ol>
<li>在“对象资源管理器”中，连接到 数据库引擎的实例。</li>
<li>在标准菜单栏上，单击“新建查询”。</li>
<li><p>将以下示例复制并粘贴到查询窗口中，然后单击“执行”。下面的示例启用 sa 登录名并设置一个新密码。</p>
<pre><code>ALTER LOGIN sa ENABLE ;
GO
ALTER LOGIN sa WITH PASSWORD = &apos;&lt;enterStrongPasswordHere&gt;&apos; ;
GO
</code></pre></li>
</ol>
<blockquote>
<p><strong>相关链接</strong><br><a href="https://msdn.microsoft.com/zh-cn/library/ms188670(v=sql.120" target="_blank" rel="external">MSDN-管理数据库引擎服务</a>.aspx#Anchor_2)</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML常用头标签]]></title>
      <url>http://www.upwzr.com/2015/10/08/html-head-tags/</url>
      <content type="html"><![CDATA[<h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><p><code>&lt;meta&gt;</code>标签提供了 HTML 文档的元数据(metadate)。元数据不会显示在客户端，而是被浏览器解析。<br>meta元素通常用于指定网页的描述，关键词，的文件的最后修改，作者，和其他元数据。<br>元数据可以被使用浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 Web 服务调用。</p>
<p><code>&lt;meta&gt;</code>标签通常位于<code>&lt;head&gt;</code>区域内,有如下几个属性；</p>
<blockquote>
<p><strong>charset</strong>-定义文档字符编码，常用值为utf-8<br><strong>http-equiv</strong>-提供了名称/值对中的名称，并指示服务器把名称/值对添加到发送给浏览器的MIME文档头部<br><strong>name</strong>-提供了名称/值对中的名称，通常情况下可自定义对自己和源文档的读者来说富有意义的名称，常用值有<code>keywords``description</code>等<br><strong>content</strong>-定义与<code>http+equiv</code>或<code>name</code>属性相关的元信息，即名称/值对中的值<br><strong>scheme</strong>-定义用于翻译<code>content</code>属性值的格式，html5中已删除此属性</p>
</blockquote>
<p>使用<code>http-equiv</code>属性，服务器将把名称/值对添加到发送给浏览器的内容头部，例如：</p>
<pre><code>&lt;meta http-equiv=&quot;charset&quot; content=&quot;iso-8859-1&quot;&gt;
&lt;meta http-equiv=&quot;expires&quot; content=&quot;31 Dec 2008&quot;&gt;
</code></pre><p>浏览器头部就应包含：</p>
<pre><code>content-type: text/html
charset:iso-8859-1
expires:31 Dec 2008
</code></pre><p>所有服务器都至少要发送一个：<code>content-type:text/html</code>，这将告诉浏览器准备接受一个 HTML 文档。</p>
<p>其它实例：</p>
<pre><code>//定义文档关键词，用于搜索引擎
&lt;meta name=&quot;keywords&quot; content=&quot;HTML, CSS, XML, XHTML, JavaScript&quot;&gt;
//每30秒刷新页面
&lt;meta http-equiv=&quot;refresh&quot; content=&quot;30&quot;&gt;
//声明文档使用的字符编码
&lt;meta charset=&apos;utf-8&apos;&gt;
</code></pre><p>还有一种lang属性写法：</p>
<pre><code>//简体中文
&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;
//繁体中文
&lt;html lang=&quot;zh-cmn-Hant&quot;&gt;
//英文
&lt;html lang=&quot;en&quot;&gt;
</code></pre><p>lang属性的取值应该遵循 <a href="http://tools.ietf.org/html/bcp47" target="_blank" rel="external">BCP 47 - Tags for Identifying Languages</a></p>
<blockquote>
<p>详见知乎回答<a href="http://www.zhihu.com/question/20797118?utm_source=weibo&amp;utm_medium=weibo_share&amp;utm_content=share_question&amp;utm_campaign=share_sidebar" target="_blank" rel="external">http://zhi.hu/XyIa</a></p>
</blockquote>
<p>另外，meta的巧妙使用可以对网站SEO优化，相关的常用name值有<code>description``keywords``author``robots</code>等。</p>
<pre><code>//页面描述
&lt;meta name=&quot;description&quot; content=&quot;不超过150个字符&quot; /&gt;
//页面关键字
&lt;meta name=&quot;keywords&quot; content=&quot;&quot;/&gt;
//网页作者
&lt;meta name=&quot;author&quot; content=&quot;name, email@gmail.com&quot; /&gt;
</code></pre><p>robots定义网页搜索引擎索引方式,对应content是一组使用英文逗号分割的值，通常有如下几种取值：<code>none``noindex``nofollow``all``cache``nocache``index``follow</code>等。</p>
<pre><code>&lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt;
</code></pre><blockquote>
<p><strong>相关链接</strong><br><a href="https://msdn.microsoft.com/zh-cn/library/ff723998(v=expression.40" target="_blank" rel="external">MSDN文档-搜索引擎优化</a>.aspx)<br>p<a href="https://msdn.microsoft.com/zh-cn/library/ff724037(v=expression.40" target="_blank" rel="external">MSDN文档-<meta name="robots"></a>.aspx)</p>
</blockquote>
<p>mete还可以通过name属性的<code>msapplication-TileColor``msapplication-TileImage</code>两个值设置win8磁贴相关样式</p>
<pre><code>//磁贴颜色
&lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#000&quot;/&gt;
//磁贴图标
&lt;meta name=&quot;msapplication-TileImage&quot; content=&quot;icon.png&quot;/&gt;
</code></pre><h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><p>link标签最常见的用途是链接样式表</p>
<pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;
</code></pre><p>link比较常用的属性有<code>rel``href``type</code>：<code>rel</code>属性是必须的，规定当前文档与被链接文档/资源之间的关系，属性较多，详见底下相关链接；href 属性规定外部资源（通常是样式表文件）的位置（URL）；type 属性规定被链接文档/资源的 MIME 类型，只有设置了<code>href</code>属性时才能使用此属性。</p>
<blockquote>
<p><strong>相关链接：</strong><br><a href="http://www.w3school.com.cn/tags/att_link_rel.asp" target="_blank" rel="external">HTML <link> 标签的 rel 属性</a><br><a href="http://www.iana.org/assignments/media-types/media-types.xhtml" target="_blank" rel="external">IANA MIME类型</a></p>
</blockquote>
<p>两个实例：</p>
<pre><code>//添加RSS订阅
&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;RSS&quot; href=&quot;/rss.xml&quot; /&gt;
//添加favicon icon
&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/ico&quot; href=&quot;/favicon.ico&quot; /&gt;
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQury基础笔记]]></title>
      <url>http://www.upwzr.com/2015/10/01/jqury-notes/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.从<a href="http://jqury.com" target="_blank" rel="external">jqury.com</a>下载</p>
<p>2.CDN</p>
<pre><code>Baidu CDN:http://libs.baidu.com/jquery/1.10.2/jquery.min.js
又拍云 CDN:http://upcdn.b0.upaiyun.com/libs/jquery/jquery-2.0.2.min.js
新浪 CDN:http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js
Google CDN:http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js
Microsoft CDN:http://ajax.htmlnetcdn.com/ajax/jQuery/jquery-1.10.2.min.js
</code></pre><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>基础语法： <code>$(selector).action()</code></strong></p>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>jquery选择器基于已存在的css选择器</p>
<p><code>$(this)</code> - 当前元素<br><code>$(&quot;p&quot;)</code> - 所有 \<p\> 元素<br><code>$(&quot;p:first&quot;)</code> - 选取第一个\<p\>元素<br><code>$(&quot;p .test&quot;)</code> - 所有 class=”test” 的 \<p\> 元素<br><code>$(&quot;.test&quot;)</code> - 所有class=”test”的元素<br><code>$(&quot;#test&quot;)</code> - 所有 id=”test” 的元素<br><code>$(&quot;[href]&quot;)</code> - 带有href属性的元素<br><code>$(&quot;ui li:first&quot;)</code> - 选取第一个\<ul\>的第一个\<li\>元素<br><code>$(&quot;ui li:first-child&quot;)</code> - 选取每个\<ul\>的第一个\<li\>元素<br><code>$(&quot;a[target!=&#39;_blank&#39;]&quot;)</code> - 选取所有target属性值不等于”_blank”的\<a\>元素<br><code>$(&quot;:button&quot;)</code> - 选取所有type=”button”的\<input\>元素和\<button\>元素</button\></input\></a\></li\></ul\></li\></ul\></p\></p\></p\></p>
<p>还有一些自定义的选择器</p>
<p><code>$(&quot;tr:even&quot;)</code> - 选取奇数位置的\<tr\>，偶数为<code>:odd</code><br><code>$(&quot;tr:nth-child(odd)&quot;)</code> - 相对于元素的父元素而非当前所选择的元素来选取偶数位置<br><code>$(&quot;td:contains(monkey)&quot;)</code> - 选择含有’monkey’的表格单元</tr\></p>
<p>注意<code>:nth-child</code>是jquery中唯一从1开始计数的选择符</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="文档就绪事件"><a href="#文档就绪事件" class="headerlink" title="文档就绪事件"></a>文档就绪事件</h3><p>为防止jquery代码在文档未加载完成时就执行，最好将函数封装在document ready函数中：</p>
<pre><code>$(document).ready(function(){

    // jQuery code...

});
</code></pre><p>简写为：</p>
<pre><code>$(function(){

    // jQuery code...

    });
</code></pre><p>或者：</p>
<pre><code>$().ready(function(){

         //jQuery code...

    })
</code></pre><h3 id="常见DOM事件"><a href="#常见DOM事件" class="headerlink" title="常见DOM事件"></a>常见DOM事件</h3><p>鼠标事件：<code>click</code> <code>dbclick</code> <code>mouseenter</code> <code>mouseleave</code> <code>mouseup</code> <code>hover</code> <code>mousedown</code><br>键盘事件：<code>keypress</code> <code>keydown</code> <code>keyup</code><br>表单事件：<code>submit</code> <code>change</code> <code>focus</code> <code>blur</code><br>文档/窗口事件：<code>load</code> <code>resize</code> <code>scroll</code> <code>unload</code></p>
<pre><code>$(&quot;p&quot;).click(function(){
    $(this).hide();
    });

$(&quot;input&quot;).focus(function(){
      $(this).css(&quot;background-color&quot;,&quot;#cccccc&quot;);
        });
</code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ol>
<li><p>显示/隐藏</p>
<pre><code>//可选参数speed规定变化速度，可取&quot;slow&quot; &quot;fast&quot;或毫秒数
//可选参数callback为变化完成之后执行的函数
$(selector).hide(speed,callback);
$(selector).show(speed,callback);
//toggle()方法可切换hide()和show()
$(selector).toggle(speed,callback);
</code></pre></li>
<li><p>淡入淡出</p>
<pre><code>//淡入隐藏的元素
$(selector).fadeIn(speed,callback);
//淡出可见元素
$(selector).fadeOut(speed,callback);
//在fadeIn()和fadeOut()间进行切换
$(selector).fadeToggle(speed,callback);
//渐变为给定的不透明度(opacity)，值介于 0 与 1 之间，speed与opacity为必选参数
$(selector).fadeTo(speed,opacity,callback);
</code></pre></li>
<li><p>滑动</p>
<pre><code>$(selector).slideDown(speed,callback);
$(selector).slideUp(speed,callback);
$(selector).slideToggle(speed,callback);
</code></pre></li>
<li><p>动画</p>
<pre><code>//必需的params定义形成动画的css属性，可同时操作多个属性
//要使用驼峰式书写属性名，如`paddingLeft`而不是`padding-left`
$(selector).animate({params},speed,callback);

//停止动画或效果
//stopAll参数规定是否应该清除动画队列，默认为false，仅停止活动的动画
//goToEnd参数规定是否立即完成当前动画
$(selector).stop(stopAll=false,goToEnd=false);
</code></pre></li>
</ol>
<p>实例：</p>
<pre><code>$(&quot;button&quot;).click(function(){
  $(&quot;div&quot;).animate({
    left:&apos;250px&apos;,
    opacity:&apos;0.5&apos;,
    height:&apos;150px&apos;,
    width:&apos;150px&apos;
      });
});
</code></pre><p><strong>注意：对元素位置进行操作，要将元素的css position属性设为<code>absolute``fixed</code>或者<code>relative</code></strong></p>
<p>jQuery中有一种chanining技术，允许在相同元素上依次执行多条命令</p>
<pre><code>//可进行换行和缩进以美观
$(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;).slideUp(2000).slideDown(2000);
</code></pre><h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><pre><code>//设置或获取文本内容
$(selector).text();
//设置或获取转义后的内容
$(selector).html();
//设置或获取输入框内容
$(selector).val();
//设置或获取属性
$(selector).attr();
</code></pre><p><code>text()``html()``val()``attr()</code>拥有回调函数<code>callback(i,origText)</code>,i为当前元素下标，origText为原始值</p>
<pre><code>//在被选元素的结尾插入一个或多个内容
$(selector).append();
//在被选元素的开头插入一个或多个内容
$(selector).prepend();
//在被选元素之后插入一个或多个内容
$(selector).after();
//在被选元素之前插入一个或多个内容
$(selector).before();
</code></pre><p><code>after()/before()</code>与<code>append()/prepend()</code>的区别在于，前者是将内容插入到对象中来，作为元素的子节点，后者是将内容插入到对象的前后，作为元素的兄弟节点。</p>
<p>jQuery通常使用两种方法删除元素：</p>
<pre><code>//删除被选元素及其子元素，可选参数selector可对删除元素进行过滤
$(selector).remove(selector);
//删除被选元素的子元素
$(selector)..empty();    
</code></pre><h3 id="CSS操作"><a href="#CSS操作" class="headerlink" title="CSS操作"></a>CSS操作</h3><pre><code>//添加class属性
$(selector).addClass(className);
//删除class属性
$(selector).removeClass(className);
//add/remove切换操作
$(selector).toggleClass(classname);
</code></pre><p>实例：</p>
<pre><code>  .important{font-weight:bold;font-size:xx-large;}
  .blue{color:blue;}

  $(&quot;button&quot;).click(function(){
$(&quot;h1,h2,p&quot;).addClass(&quot;blue&quot;);
$(&quot;div&quot;).addClass(&quot;important blue&quot;);
  });
</code></pre><p>还有一个更实用的<code>css()</code>方法，设置或返回被选元素的一个或多个样式属性</p>
<pre><code>//返回首个匹配的值
$(&quot;p&quot;).css(&quot;background-color&quot;);
//设置属性值
$(&quot;p&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;);
//设置多个属性值
$(&quot;p&quot;).css({&quot;background-color&quot;:&quot;yellow&quot;,&quot;font-size&quot;:&quot;200%&quot;});
</code></pre><p>jQuery提供了多个处理尺寸的方法。<br><img src="/img/css-size.png" alt="css-size"></p>
<pre><code>//设置或返回元素的宽度（不包括内边距、边框或外边距）
$(selector).width();
//设置或返回元素的高度（不包括内边距、边框或外边距）
$(selector).height();
//返回元素的宽度（包括内边距）
$(selector).innerWidth();
//返回元素的高度（包括内边距）
$(selector).innerHeight();
//返回元素的宽度（包括内边距和边框）
$(selector).outerWidth();
//方法返回元素的高度（包括内边距和边框）
$(selector).outerHeight();
</code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ol>
<li><p>向上遍历</p>
<pre><code>//返回每个被选元素的直接父元素
$(selector).parent();
//返回被选元素的所有祖先，直到文档的根元素&lt;html&gt;,可传入参数制定返回的祖先
$(selector).parents();
//返回制定元素之间的祖先元素
$(selector).parentsUntil(selector)
</code></pre></li>
<li><p>向下遍历</p>
<pre><code>//返回被选元素所有直接子元素，客串如参数指定返回的子元素
$(selector).children();
//返回被选元素的所有后代，直到最后一代,注意参数的传递
$(selector).find(&quot;*&quot;);
</code></pre></li>
</ol>
<p><strong>注意：find()需要传入参数”*”以返回所有后代</strong>，也可以指定子元素。</p>
<p>实例：</p>
<pre><code>//返回class=&quot;1&quot;的所有&lt;p&gt;
$(document).ready(function(){
  $(&quot;div&quot;).children(&quot;p.1&quot;);
});
</code></pre><ol>
<li><p>水平遍历</p>
<pre><code>//返回被选元素所有同胞元素，可传入参数指定同胞元素
$(selector).siblings();
//返回被选元素下一个/上一个同胞元素    
$(selector).next();
$(selector).prev();
//返回被选元素所有跟随/前面同胞元素
$(selector).nextAll();
$(selector).prevAll();
//返回指定元素之间所有同胞元素
$(selector).nextUntil(selector);
$(selector).prevUntil(selector);
</code></pre></li>
<li><p>过滤</p>
<pre><code>//返回被选元素的首个元素
$(selector).first();
//返回被选元素的最后一个元素
$(selector).last();
//返回被选元素中指定索引的元素
$(selector).eq(index);
//返回匹配的元素
$(selector).filter(selector);
//返回不匹配的所有元素
$(selector).not(selector);
</code></pre></li>
</ol>
<p>首个元素的索引号是0。</p>
<h2 id="jQuery-AJAX"><a href="#jQuery-AJAX" class="headerlink" title="jQuery AJAX"></a>jQuery AJAX</h2><p>jQuery将javascript的AJAX相关函数进一步封装，使用起来非常方便</p>
<blockquote>
<p>总是记不住这个单词怎么写<br>AJAX = Asynchronous JavaScript and XML</p>
</blockquote>
<p>load()函数从服务器加载数据并把返回的数据放入被选元素中</p>
<pre><code>//必需的 URL 参数规定您希望加载的 URL。
//可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。
$(selector).load(URL,data,callback);
</code></pre><p><code>callback</code>函数可设置如下参数:</p>
<blockquote>
<p><code>responseTxt</code> - 包含调用成功时的结果内容<br><code>statusTXT</code> - 包含调用的状态<br><code>xhr</code> - 包含 XMLHttpRequest 对象</p>
</blockquote>
<p>实例：</p>
<pre><code>    //demo_test.txt内容为
    //&lt;h2&gt;jQuery and AJAX is FUN!!!&lt;/h2&gt;
//&lt;p id=&quot;p1&quot;&gt;This is some text in a paragraph.&lt;/p&gt;

    //获取txt中id为p1的元素内容
    //执行错误返回错误码及错误信息
    $(&quot;button&quot;).click(function(){
      $(&quot;#div1&quot;).load(&quot;demo_test.txt #p1&quot;,function(responseTxt,statusTxt,xhr){
        if(statusTxt==&quot;success&quot;)
          alert(&quot;External content loaded successfully!&quot;);
        if(statusTxt==&quot;error&quot;)
          alert(&quot;Error: &quot;+xhr.status+&quot;: &quot;+xhr.statusText);
      });
    });
</code></pre><p><code>get()</code>和<code>post()</code>方法用于通过 HTTP GET 或 POST 请求从服务器请求数据。</p>
<blockquote>
<p>GET 基本上用于从服务器获得（取回）数据。可能返回缓存数据。<br>POST 向指定的资源提交要处理的数据,也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。</p>
</blockquote>
<pre><code>//回调函数callback(data,status),第一个参数为请求页面内容，第二个参数为请求状态
$.get(URL,callback);

//可选的 data 参数规定连同请求发送的数据
//可选参数callback(data,status)
$.post(URL,data,callback);
</code></pre><p>实例：</p>
<pre><code>$(&quot;button&quot;).click(function(){
  $.post(&quot;demo_test_post.html&quot;,
  {
       name:&quot;Donald Duck&quot;,
       city:&quot;Duckburg&quot;
  },
  function(data,status){
    alert(&quot;Data: &quot; + data + &quot;nStatus: &quot; + status);
  });
});
</code></pre><h2 id="jQuery-JSONP"><a href="#jQuery-JSONP" class="headerlink" title="jQuery JSONP"></a>jQuery JSONP</h2><p><strong>JSONP(JSON with Padding)</strong> 是 json 的一种”使用模式”，可以让网页跨域读取数据。由于同源策略的存在，AJAX无权限进行跨域请求，为了解决这个头疼的问题，开发人员逐渐完善了JSONP这种非正式传输协议。该协议的要点就是允许用户传递一个callback参数给服务端，服务端返回数据时会将这个callback参数作为函数来封装JSON数据。</p>
<blockquote>
<p>同源策略(Same-Origin Policy)：相同domain/ip/端口/协议是为同一个域或源(origin),非同源的脚本不能访问对方的资源，除非得到授权。<br><strong>相关链接：</strong><br><a href="http://www.jianshu.com/p/4e17445d66e2" target="_blank" rel="external">同源策略——浏览器的安全卫士</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="external">JavaScript的同源策略</a><br><a href="http://blog.csdn.net/broadview2006/article/details/8595191" target="_blank" rel="external">浏览器的同源策略</a></p>
</blockquote>
<p>jQuery可以很方便的实现JSONP调用，下面贴出一个简单实例。<br>服务端test.php代码：</p>
<pre><code>&lt;?php
    header(&apos;Content-type: application/json&apos;);
    //获取回调函数名
    $jsoncallback = htmlspecialchars($_REQUEST [&apos;jsoncallback&apos;]);
    //json数据
    $json_data = &apos;[&quot;customername1&quot;,&quot;customername2&quot;]&apos;;
    //输出jsonp格式的数据
    echo $jsoncallback . &quot;(&quot; . $json_data . &quot;)&quot;;
?&gt;
</code></pre><p>客户端实现：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;JSONP 实例&lt;/title&gt;
    &lt;script src=&quot;http://apps.bdimg.com/libs/jquery/1.8.3/jquery.js&quot;&gt;&lt;/script&gt;    
&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;divCustomers&quot;&gt;&lt;/div&gt;
&lt;script&gt;
$.getJSON(&quot;test.php?jsoncallback=?&quot;, function(data) {

    var html = &apos;&lt;ul&gt;&apos;;
    for(var i = 0; i &lt; data.length; i++)
    {
        html += &apos;&lt;li&gt;&apos; + data[i] + &apos;&lt;/li&gt;&apos;;
    }
    html += &apos;&lt;/ul&gt;&apos;;

    $(&apos;#divCustomers&apos;).html(html);
});
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>url中的<code>?</code>表示让jQuery自动处理返回的callback数据，也可自定义回调函数名称，默认为jQuery自动生成的随机函数名。</p>
<p>附上一个说的比较详细的博客：<br><a href="http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html" target="_blank" rel="external">说说JSON和JSONP，也许你会豁然开朗，含jQuery用例</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式笔记]]></title>
      <url>http://www.upwzr.com/2015/09/30/regular-expression-notes/</url>
      <content type="html"><![CDATA[<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><ul>
<li><code>.</code> 匹配任何单个字符</li>
<li><code>*</code> 匹配任意长度</li>
<li><code>+</code> 匹配前面的一个或多个实例</li>
<li><code>?</code> 匹配前面的0个或多个实例</li>
<li><code>[...]</code> 匹配方括号内的任意字符</li>
<li><code>^</code> 匹配字符串开头</li>
<li><code>$</code> 匹配字符串末尾</li>
<li><code>{n,m}</code> 匹配前面的字符出现n到m次</li>
<li><code>{n,}</code> 匹配前面的字符至少出现三次</li>
</ul>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>修饰符位于结束定界符之后，用来改变正则表达式的行为。</p>
<ul>
<li><code>i</code> 不区分大小写</li>
<li>/s 忽略转义回车</li>
<li>/U</li>
</ul>
<h2 id="匹配字符域"><a href="#匹配字符域" class="headerlink" title="匹配字符域"></a>匹配字符域</h2><ul>
<li><code>[char list]</code> 匹配方括号内的任意字符集，包括空格。此例即匹配c、h、a、r、空格、l、i、s、t中的任一字符</li>
<li><code>[^char list]</code> 不匹配方括号内的字符，也可用<code>!</code></li>
<li><code>[a-z]</code> 匹配字符a-z,</li>
</ul>
<p>还有几个–忘了叫啥了的–</p>
<ul>
<li><code>\w</code> 相当与[A-Za-z0-9]</li>
<li><code>\s</code> 匹配空白字符，相当与[\t\r\n]</li>
<li><code>\d</code> 匹配数字，[0-9]<br><em>注：大写效果与小写相反</em></li>
</ul>
<p>实例1：</p>
<pre><code>//下面两种效果相同
//匹配由字母数字下划线连字符组成，长度在3-15的用户名
//注意连字符需要转义
/^[\w_\-]{3,15}$/
/^[A-Za-z0-9_\-]{3,15}$/
</code></pre><p>实例2：</p>
<pre><code>//匹配email地址
//本地部分包含A-Za-z0-9等，不包含括号，#@;等
/^([\w!#@$&amp;&apos;*+\/=?^&apos;{|}~.\-]+)@([\w]+\.)
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从教务系统中获取课程表图片]]></title>
      <url>http://www.upwzr.com/2015/08/29/get-img-from-base64/</url>
      <content type="html"><![CDATA[<p>教务系统中的课表以图片形式显示，又不知何故不允许另存，禁用右键也无效（教务使用体验极差，这方面倒是做的细心V.V），以前是用chrome开发者工具翻一下resource就能找到图片，拖下来就成。<br><img src="/img/2015-08-29-get-img-from-base64_1.png" alt="图片"><br>昨天想再把新学期课表存下来发现不行了，直接拖到电脑上不管用，拖到新标签页里一堆乱码<br><img src="/img/2015-08-29-get-img-from-base64_2.png" alt="图片"><br>拖到sublime text里面，直接变成了整齐的编码<br><img src="/img/2015-08-29-get-img-from-base64_3.png" alt="图片"><br>网上查一下之后知道图片经base64编码，我拖下来得到的就是编码后的数据，重现的话写个html就行了</p>
<pre><code>&lt;span&gt;&lt;img src=&quot;data:image/jpg;base64,编码后的数据&quot;&gt;&lt;/span&gt;
看出来了吧，上面图里我拖下来的其实是src里的完整格式。
</code></pre><p>这样就把图片的“文字版”写到html里了，用浏览器访问即可解码出图片，可以随便保存啦。</p>
<p>这种用base64编码之后传输图片的形式还是比较不错，从别人的博客上摘录下“减少了HTTP请求，某些文件可以避免跨域的问题，没有图片更新要重新上传，还要清理缓存的问题”这些优点。但实际上这种方式并不像想象中那样可以节省流量，文件反而增大约35%，所以大图片就不要用这种方法了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[国产科幻里程碑----三体]]></title>
      <url>http://www.upwzr.com/2015/08/29/Three-Body-problem/</url>
      <content type="html"><![CDATA[<h3 id="还没开始写，但是既然大刘已经得奖了，先在这里留个位置"><a href="#还没开始写，但是既然大刘已经得奖了，先在这里留个位置" class="headerlink" title="还没开始写，但是既然大刘已经得奖了，先在这里留个位置"></a>还没开始写，但是既然大刘已经得奖了，先在这里留个位置</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FSCapture序列号]]></title>
      <url>http://www.upwzr.com/2015/08/13/FSCapture-serial/</url>
      <content type="html"><![CDATA[<p>最近忽然需要截取长图，手头只有windows自带的截图工具和可以忽略的qq截图工具，网上搜了一下之后感觉FSCapture这小工具还不错，官网貌似被墙。</p>
<blockquote>
<h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p><a href="http://gsf-cf.softonic.com/239/c7f/1e22dad1b55ee81b02c103678723ce0caa/file?SD_used=0&amp;channel=WEB&amp;fdh=no&amp;id_file=44633&amp;instance=softonic_en&amp;type=PROGRAM&amp;Expires=1439480028&amp;Signature=Z00BEX-HTbfO0aeW77n7rRacarrJz4qmYruoB0nP~aJg4fiG4ae6vtXUHA8VJE57bOSJG3qFG9y2YfrxWxvnlkNz4qGRK6gdM~dtGwrY~j~ynkRLsyvHqlNc0TYtdDYkxEK3BBezm8~oIlcNxQyVKoQZ6mbTFm7~DjmcEMk167Q_&amp;Key-Pair-Id=APKAJUA62FNWTI37JTGQ&amp;filename=FSCaptureSetup69.exe" target="_blank" rel="external">FSCapture6.9</a></p>
<h3 id="注册码"><a href="#注册码" class="headerlink" title="注册码"></a>注册码</h3><p>企业版序列号<br>name：<code>bluman</code><br>serial/序列号/注册码：<code>VPISCJULXUFGDDXYAUYF</code></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开张啦开张啦]]></title>
      <url>http://www.upwzr.com/2015/08/03/blog-open/</url>
      <content type="html"><![CDATA[<h2 id="我的博客正式开张"><a href="#我的博客正式开张" class="headerlink" title="我的博客正式开张"></a>我的博客正式开张</h2><p>自从有了博客，走起路来都飘。这难道就是传说中的装B?</p>
<p>借此博客用来记录成长轨迹，分享学习心得，培养所谓人文情操。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown语法简记]]></title>
      <url>http://www.upwzr.com/2015/08/03/markdown-notes/</url>
      <content type="html"><![CDATA[<h2 id="0-反斜杠"><a href="#0-反斜杠" class="headerlink" title="0. 反斜杠"></a>0. 反斜杠</h2><p>反斜杠可以将在markdown中有特殊意义的字符作为正常字符插入。</p>
<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h2><p>类Setext形式<br><code>=</code>和<code>-</code>的数量随意，效果效果是相同的。</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">This is H1</span></div><div class="line">==========</div><div class="line"></div><div class="line"><span class="section">This is H2</span></div><div class="line">----------</div></pre></td></tr></table></figure>
<p>类atx形式<br>也可以写成前后对称的形式。</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#  H1</span></div><div class="line"></div><div class="line"><span class="meta">##  H2</span></div><div class="line"></div><div class="line"><span class="meta">######  H6</span></div></pre></td></tr></table></figure>
<p>注意在#与标题间必须存在至少一个空格或制表符</p>
<h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2. 引用"></a>2. 引用</h2><p>>在段落前加<code>&gt;</code>进行引用。<br>    在段落前加<code>&gt;</code>进行引用。<br>    在段落前加<code>&gt;</code>进行引用。</p>
<p>>或者每行前加<code>&gt;</code>进行引用。<br>>或者每行前加<code>&gt;</code>进行引用。<br>>或者每行前加<code>&gt;</code>进行引用。</p>
<p>效果相同。</p>
<blockquote>
<p>在段落或者每句前加<code>&gt;</code>进行引用<br>在段落或者每行前加<code>&gt;</code>进行引用。<br>在段落或者每行前加<code>&gt;</code>进行引用。</p>
</blockquote>
<p>加上不同数量的<code>&gt;</code>实现嵌套引用。</p>
<h2 id="3-代码区块"><a href="#3-代码区块" class="headerlink" title="3. 代码区块"></a>3. 代码区块</h2><p>代码区块只需一个制表符或者4个空格：</p>
<p>当你想插入代码区块</p>
<pre><code>只需4个空格或者1个制表符
</code></pre><p>标记一小段代码可以用反引号`包起来，在本文随处可见<code>效果</code>。</p>
<p>也可用<code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure></code></p>
<pre><code>代码区块
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">将产生相同效果。但是此种方法并非标准markdown语法，有时可能会解析不正确。</div><div class="line">在代码区块中可以方便的插入HTML原始码，Markdown会自动将`&lt;``&amp;`等转换为HTML实体。</div><div class="line"></div><div class="line"></div><div class="line">## <span class="number">4</span>. 列表</div><div class="line"></div><div class="line">无序列表</div></pre></td></tr></table></figure>
</code></pre><ul>
<li>red</li>
</ul>
<ul>
<li>green</li>
</ul>
<ul>
<li>yellow<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">三种形式等同。</div><div class="line"></div><div class="line"><span class="bullet">* </span>red</div><div class="line"><span class="bullet">+ </span>green</div><div class="line"><span class="bullet">- </span>yellow</div><div class="line"></div><div class="line">有序列表</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>吃</li>
<li>粑粑<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 吃</div><div class="line"><span class="number">2.</span> 粑粑</div><div class="line"></div><div class="line">句点后要有空格。数字是多少都无所谓，产生的效果相同。</div><div class="line"></div><div class="line">列表项下包含段落时，段落必须以<span class="number">1</span>个制表符或<span class="number">4</span>个缩进开头。</div><div class="line">如果列表项下需要引用，`&gt;`需要缩进。</div><div class="line">列表项下包含代码区块时，需要双倍缩进（<span class="number">2</span>个制表符或者<span class="number">8</span>个空格）。</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><p>列表项下引用</p>
<blockquote>
<p>空行并缩进<br>```</p>
</blockquote>
</li>
<li><p>列表项下引用</p>
<blockquote>
<p>空行并缩进</p>
</blockquote>
</li>
</ul>
<h2 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5. 分割线"></a>5. 分割线</h2><p>以下形式均可产生相同分割线，只要是3个以上的<code>*``+``-</code>即可。</p>
<pre><code>* * *
+++
-----
</code></pre><h2 id="6-强调"><a href="#6-强调" class="headerlink" title="6. 强调"></a>6. 强调</h2><p>*red*<br>_red_<br>都会产生 <em>red</em> 的效果。</p>
<p>**green**<br>__green__<br>都会产生 <strong>green</strong> 的效果。</p>
<p>强调可以直接插在句子中。</p>
<h2 id="7-链接"><a href="#7-链接" class="headerlink" title="7. 链接"></a>7. 链接</h2><p>行内式</p>
<pre>这是[Google](http://google.com)搜索.</pre>   
这是[Google](http://google.com)搜索.

参考式
<pre>
这是[Google][id1]搜索
这是[Baidu][id2]搜索
这是[Github][]。
这是[Twitter][]。

[id1]:https://google.com
[id2]:https://baidu.com
[Github]:https://github.com
[Twitter]:https://twitter.com

</pre>

<p>这是<a href="https://google.com" target="_blank" rel="external">Google</a>搜索<br>这是<a href="https://baidu.com" target="_blank" rel="external">Baidu</a>搜索<br>这是<a href="https://github.com" target="_blank" rel="external">Github</a>。<br>这是<a href="https://twitter.com" target="_blank" rel="external">Twitter</a>。</p>
<p>Markdown支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只需用&lt;&gt;括起来。<br>    <a href="https://google.com" target="_blank" rel="external">https://google.com</a><br>会自动转换为<br>    <a href="https://google.com/" target="_blank" rel="external">https://google.com/</a></p>
<h2 id="8-图片"><a href="#8-图片" class="headerlink" title="8. 图片"></a>8. 图片</h2><p>行内式格式为：</p>
<pre>![图片替代文字](/path/to/img.jpg)</pre>

<p>参考式像这样：</p>
<pre>
![Alt text][id]
[id]: url/to/image "Optional title attribute"  title文字部分可缺省
</pre>


<h2 id="详细内容参见"><a href="#详细内容参见" class="headerlink" title="详细内容参见"></a>详细内容参见</h2><p>点击进入<br><a href="https://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md" target="_blank" rel="external">Markdown语法简体中文版</a><br><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">Markdoown官方文档</a></p>
]]></content>
    </entry>
    
  
  
</search>

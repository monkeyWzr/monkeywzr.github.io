<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on マクロス</title>
    <link>https://www.takuzen.me/categories/tech/</link>
    <description>Recent content in tech on マクロス</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>呉</copyright>
    <lastBuildDate>Wed, 29 Apr 2020 09:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.takuzen.me/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Programming Language - Subtyping</title>
      <link>https://www.takuzen.me/posts/2020-04-29-subtyping/</link>
      <pubDate>Wed, 29 Apr 2020 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2020-04-29-subtyping/</guid>
      <description>Some Good Subtyping Rules  Width subtyping: A supertype can have a subset of fields with the same types, i.e., a subtype can have extra fields. Permutation subtypings: A supertype can have the same set of fields with the same types in a different order. Transitivity: if t1 is subtype of t2, and t2 is subtype of t3, then t1 is subtype of t3. Reflexivity: Every type is a subtype of itself.</description>
    </item>
    
    <item>
      <title>JavaScript Comparison operation at a glance</title>
      <link>https://www.takuzen.me/posts/2019-03-28-javascript-comparison/</link>
      <pubDate>Thu, 28 Mar 2019 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2019-03-28-javascript-comparison/</guid>
      <description>When given a scenario like:
console.log(null &amp;gt; -1) //true It produces true, which makes me think null is treated as 0. But when I run:
console.log(null == 0) // false console.log(null &amp;gt; 0) // false console.log(null &amp;lt; 0) // false They all output false!
I googled a lot and finally found answers in Ecma-262 Specification.
The comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows:</description>
    </item>
    
    <item>
      <title>Js tips I can&#39;t remember</title>
      <link>https://www.takuzen.me/posts/2019-03-22-js-tips/</link>
      <pubDate>Fri, 22 Mar 2019 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2019-03-22-js-tips/</guid>
      <description>&lt;h2 id=&#34;__proto__-vs-prototype&#34;&gt;&lt;code&gt;__proto__&lt;/code&gt; VS &lt;code&gt;prototype&lt;/code&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__proto__&lt;/code&gt; is the actual object that is used in the lookup chain to resolve methods and others. &lt;code&gt;prototype&lt;/code&gt; is the object that is used to build &lt;code&gt;__proto__&lt;/code&gt; when creating an object with &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The &amp;ldquo;cool kids&amp;rdquo; in JavaScript would generally pronounce &lt;code&gt;__proto__&lt;/code&gt; as &amp;ldquo;&lt;strong&gt;dunder proto&lt;/strong&gt;&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript&#34;&gt;https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; ).&lt;span style=&#34;color:#a6e22e&#34;&gt;__proto__&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt; ).&lt;span style=&#34;color:#a6e22e&#34;&gt;prototype&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Object.assign() with accessor descriptor</title>
      <link>https://www.takuzen.me/posts/2019-03-08-object-assign-with-accessor-descriptor/</link>
      <pubDate>Fri, 08 Mar 2019 10:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2019-03-08-object-assign-with-accessor-descriptor/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Copying_accessors&#34;&gt;MDN docs:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Object.assign() method only copies enumerable and own properties from a source object to a target object. It uses [[Get]] on the source and [[Set]] on the target, so it will invoke getters and setters. Therefore it assigns properties versus just copying or defining new properties. This may make it unsuitable for merging new properties into a prototype if the merge sources contain getters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cat&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_name&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nyannko&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cat&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nyannko&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;copy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Object.&lt;span style=&#34;color:#a6e22e&#34;&gt;assign&lt;/span&gt;({}, &lt;span style=&#34;color:#a6e22e&#34;&gt;nyannko&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;nyannko&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// nyannko
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;copy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// undefined
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; property is lost.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bind specific arguments of a function</title>
      <link>https://www.takuzen.me/posts/2019-03-08-es6-bind-trick/</link>
      <pubDate>Fri, 08 Mar 2019 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2019-03-08-es6-bind-trick/</guid>
      <description>To bind specific (nth) arguments of a function, we can write a decorator instead of using Function.bind():
function func(p1, p2, p3) { console.log(p1, p2, p3); } // the binding starts after however many are passed in. function decorator(...bound_args) { return function(...args) { return func(...args, ...bound_args); }; } // bind the last parameter let f = decorator(&amp;#34;3&amp;#34;); f(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // a b 3  // bind the last two parameter let f2 = decorator(&amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;) f2(&amp;#34;a&amp;#34;); // a 2 3 Even if we want to bind just the nth argument, we can do as follows:</description>
    </item>
    
    <item>
      <title>VueのNavigation Guards</title>
      <link>https://www.takuzen.me/posts/2019-01-19-vue-navigation-guards/</link>
      <pubDate>Fri, 25 Jan 2019 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2019-01-19-vue-navigation-guards/</guid>
      <description>Navigation guards are provided by vue-router. Three ways to hook:
 globally per-route in-component  NOTE:
 Params or query changes won&amp;rsquo;t trigger enter/leave navigation guards. You can either watch the $route object to react to those changes, or use the beforeRouteUpdate in-component guard. Make sure to always call the next function, otherwise the hook will never be resolved.  Global const router = new VueRouter({ ... }) // Before Guards router.</description>
    </item>
    
    <item>
      <title>ES6について</title>
      <link>https://www.takuzen.me/posts/2019-01-18-es6/</link>
      <pubDate>Fri, 18 Jan 2019 16:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2019-01-18-es6/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lukehoban/es6features#readme&#34;&gt;https://github.com/lukehoban/es6features#readme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://help.wtf/es6&#34;&gt;http://help.wtf/es6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://es6-features.org&#34;&gt;http://es6-features.org&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;string&#34;&gt;String&lt;/h2&gt;
&lt;h3 id=&#34;stringx-is-deprecated-use-stringprototypex-instead&#34;&gt;String.x is deprecated; use String.prototype.x instead.&lt;/h3&gt;
&lt;p&gt;非推奨の構文:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Javascript&#34; data-lang=&#34;Javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;; 
String.&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;/5/&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;標準の構文:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Javascript&#34; data-lang=&#34;Javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;;
String(&lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/5/&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;template-literal&#34;&gt;Template literal&lt;/h3&gt;
&lt;p&gt;Nesting templates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Javascript&#34; data-lang=&#34;Javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;classes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`header &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isLargeScreen&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`icon-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;isCollapsed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;expander&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;collapser&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>SpringMVC初使用心得</title>
      <link>https://www.takuzen.me/posts/2018-10-10-springmvc-practice/</link>
      <pubDate>Wed, 10 Oct 2018 17:25:25 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2018-10-10-springmvc-practice/</guid>
      <description>进入公司第一个实践的项目是用SpringMVC开发的。在前辈指导跳过了Spring庞大的学习内容直接上手了SpringMVC。磕磕碰碰中也算是对Spring有了一个初步的了解。
SpringMVC框架初识 SpringMVC是Spring提供的一个web框架。
架构 SpringMVC是Spring的一部分，主要模块如下图所示。
在SpringMVC为架构的项目中的代码逻辑主要有如下几层:
Controller层 Controller层起到了路由的作用，通过Spring提供的@RequestMapping注解将请求路径和请求方法（GET/POST等）与Controller的方法绑定，接受请求参数，进行验证权限等操作并调用Service执行业务逻辑。Controller类需要表明@Controller注解。
Service层 Service层实现了业务的主要逻辑。处理参数，调用负责数据库操作的Dao层，组装返回数据并将结果返回给Controller。Service类需要标注@Service注解。
Dao层 Data access的部分在项目中体现为Dao层。Dao层的类以Model为载体，借助JDBC或者Hibernate的方法封装了对表的各种操作。通常Dao层的类和数据表是一一对应的。Dao层的类需要添加@Repository注解。
Model Model层就是数据表的Java载体。需要添加@Entity注解标明该类为实体，并使用@Table(name = &amp;quot;table_name&amp;quot;)来绑定数据表。Model类中要添加@Id @GeneratedValue注解配置主键（具体含义还需进一步学习。参考链接:https://www.baeldung.com/hibernate-identifiers https://www.thoughts-on-java.org/jpa-generate-primary-keys/。）Model中的getter setter通过@Column(name = &amp;quot;id&amp;quot;, unique = true, nullable = false)注解表字段。
调度流程 首先在项目最外层的web.xml中指定了Spring提供的dispatcherServlet作为调度请求的核心servlet。
未完待续
  </description>
    </item>
    
    <item>
      <title>Android配置变更时的状态保留</title>
      <link>https://www.takuzen.me/posts/2017-10-25-save-stats-through-configuration-changes/</link>
      <pubDate>Wed, 25 Oct 2017 03:59:14 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2017-10-25-save-stats-through-configuration-changes/</guid>
      <description>在设备配置变化时，Android会销毁并重建正在运行的 Activity， 通常使用 onSaveInstanceState()，来保存有关应用状态的数据。 然后，可以在 onCreate() 或 onRestoreInstanceState() 期间恢复 Activity 状态。
但是，在有些情况下，如在执行一段耗时的异步网络请求，onSaveInstanceState()就显得力不从心了，只能重新执行异步操作。这样不但影响用户体验，处理不慎还可能会使应用异常终止。
文档中推荐使用 Fragment 来保留有状态对象的引用。通过 setRetainInstance(true) 方法，系统不会在重启活动时销毁fragment。
public class RetainedFragment extends Fragment { // data object we want to retain  private MyDataObject data; // this method is only called once for this fragment  @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); // retain this fragment  setRetainInstance(true); } public void setData(MyDataObject data) { this.data = data; } public MyDataObject getData() { return data; } } 在添加fragment时定义一个标签以便恢复。</description>
    </item>
    
    <item>
      <title>get-selected-text-from-webview</title>
      <link>https://www.takuzen.me/posts/2017-10-08-get-selected-text-from-webview/</link>
      <pubDate>Sun, 08 Oct 2017 00:30:19 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2017-10-08-get-selected-text-from-webview/</guid>
      <description>在试图自定义WebView选择文本之后的行为时，遇到了很多的麻烦。
首先便是获得选择文本这一步。WebView并没有相应的API，想获取选择的文本貌似只能通过js来解决。在最开始的尝试中，我的代码实现如下：
contentText.loadDataWithBaseURL(null, article.getContent(), &amp;#34;text/html&amp;#34;, &amp;#34;UTF-8&amp;#34;, null); contentText.evaluateJavascript(&amp;#34;(function(){return window.getSelection().toString()})()&amp;#34;, new ValueCallback&amp;lt;String&amp;gt;() { @Override public void onReceiveValue(String s) { Log.d(&amp;#34;NewsContentActivity&amp;#34;, s); } }); 然而不知为何，获取到的文本始终为空字符串&amp;quot;&amp;quot;，百思不得其解的我偶然把evaluateJavascript方法放到了重写的onActionModeStarted中，竟然可以收到正确的文本了，不过依然有个严重的问题：在当前WebView中只能成功获取一次，再次选择文本就完全没有反应了。在调试时我发现，是因为我在选择文本时要先点击屏幕使得之前的选择消除掉，否则始终是同一次的onActionModeStarted调用。这样就无法解决我的问题了，因为我需要获取拖拽浮标选择的文本。
。。。
研究了一夜，实在没什么方案可以达到我想要的效果，只能通过点击菜单项获取选择的文本了。。
未完待续。
  </description>
    </item>
    
    <item>
      <title>提升ListView的效率</title>
      <link>https://www.takuzen.me/posts/2017-10-04-making-listview-scrolling-smooth/</link>
      <pubDate>Wed, 04 Oct 2017 04:52:18 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2017-10-04-making-listview-scrolling-smooth/</guid>
      <description>利用好getView中的convertView参数 getView()方法中有一个convertView参数用来缓存已经加载好的布局，从而我们可以在代码中对布局进行重用：
public View getView(int position, View convertView, ViewGroup parent) { View view = convertView; if (view == null) view = LayoutInflater.from(getContext()).inflate(resorceId, parent, false); // ... } 使用ViewHolder 定义ViewHolder来存储已经获取的Views实例。
class ViewHolder { TextView textView; ImageView imageView; // ... } public View getView(int position, View convertView, ViewGroup parent) { View view = convertView; VIewHolder holder; if (view == null) { view = LayoutInflater.from(getContext()).inflate(resorceId, parent, false); holder = new ViewHolder(); // save views to the holder.</description>
    </item>
    
    <item>
      <title>Android Webview中的编码问题</title>
      <link>https://www.takuzen.me/posts/2017-09-24-encoding-in-webview/</link>
      <pubDate>Sun, 24 Sep 2017 20:11:30 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2017-09-24-encoding-in-webview/</guid>
      <description>最近在处理一段html文本时，为了解析ruby标签，我用Weview代替了Textview，起初是这样写的：
webview.loadData(article.getContent(), &amp;#34;text/html&amp;#34;, &amp;#34;UTF-8&amp;#34;); 结果显示出来全部是乱码。网上查阅资料后发现一个一简易的处理办法：
contentText.loadData(article.getContent(), &amp;#34;text/html; charset=UTF-8&amp;#34;, &amp;#34;UTF-8&amp;#34;); 我处理的文本是含有日语的html文本，这个方法是有效的。
另外，也可以使用WebView.loadDataWithBaseURL()代替WebView.loadData()。
webview.loadDataWithBaseURL(null, article.getContent(), &amp;#34;text/html&amp;#34;, &amp;#34;UTF-8&amp;#34;, null); 网上还有这样的方法：
if (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.FROYO) { String base64 = Base64.encodeToString(htmlString.getBytes(), Base64.DEFAULT); myWebView.loadData(base64, &amp;quot;text/html; charset=utf-8&amp;quot;, &amp;quot;base64&amp;quot;); } 如代码中所见，该方法适用于Android 4+的场景。不过我并没有进行实际测试这种方式。
 参考资料 stackoverflow - Android. WebView and loadData Android Developers
   </description>
    </item>
    
    <item>
      <title>使用Tools Attributes Reference</title>
      <link>https://www.takuzen.me/posts/2017-09-23-use-tools-attributes-reference-in-android-studio/</link>
      <pubDate>Sat, 23 Sep 2017 19:55:32 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2017-09-23-use-tools-attributes-reference-in-android-studio/</guid>
      <description>Android Studio 提供了一系列工具属性用于开发过程中，如预览布局效果等。构建应用时会自动删除掉所有此类属性。灵活应用这些属性可以给开发带来很大的快感。
为启用此类属性，加入toolsNs即可。
&amp;lt;RootTag xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; xmlns:tools=&amp;#34;http://schemas.android.com/tools&amp;#34; &amp;gt; 使用tools:前缀代替android: 由于经常会在代码中对布局进行更改，无法通过IDE的预览功能直观的查看到效果。这时可使用tools:前缀代替android:来插入简单的数据，如tools:text tools:src等。
使用tools:listitem / tools:listheader / tools:listfooter 这些属性可以将item的布局加载出来，帮助我们预览ListView或RecyclerView，而不再是单纯的文本。
还有一些其他属性，待下次用到时再进行记载。
 参考资料 文档：Tools Attributes Reference
   </description>
    </item>
    
    <item>
      <title>使用Gson解析含有动态未知键名的json数据</title>
      <link>https://www.takuzen.me/posts/2017-09-05-dealing-with-ramdomly-generated-json-key-names-using-gson-md/</link>
      <pubDate>Tue, 05 Sep 2017 14:16:06 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2017-09-05-dealing-with-ramdomly-generated-json-key-names-using-gson-md/</guid>
      <description>初学Android开发，最近在开发一个用来练手的android小项目，遇到了一个问题：在解析json时遇到了含有未知字段的json数据，此时不能通过Gson库的静态解析方式进行解析。文档上提到了可以自定义解析器，网上也有一些类似的实现案例。我也记录下相应的解决方案。
我获取的json数据可简化为：
// news { news_id: &amp;#34;id&amp;#34;, news_title: &amp;#34;title&amp;#34; } // monthJson { &amp;#34;2017-09-05&amp;#34;: [ { news_id: &amp;#34;id1&amp;#34;, news_title: &amp;#34;title1&amp;#34; }, { news_id: &amp;#34;id2&amp;#34;, news_title: &amp;#34;title2&amp;#34; } ], &amp;#34;2017-09-04&amp;#34;: [ { news_id: &amp;#34;id1&amp;#34;, news_title: &amp;#34;title1&amp;#34; }, { news_id: &amp;#34;id2&amp;#34;, news_title: &amp;#34;title2&amp;#34; } ] } 可建立如下模型（省略 getter 和 setter ）：
public class News { @SerializedName(&amp;#34;news_id&amp;#34;) private String id; @SerializedName(&amp;#34;news_title&amp;#34;) private String title; } public class MonthNews { private Map&amp;lt;String, List&amp;lt;News&amp;gt;&amp;gt; monthNews; public MonthNews(Map&amp;lt;String, List&amp;lt;News&amp;gt;&amp;gt; monthNews) { this.</description>
    </item>
    
    <item>
      <title>用php://input代替php的$HTTP_RAW_POST_DATA全局变量</title>
      <link>https://www.takuzen.me/posts/2017-09-03-php-http-raw-post-data-feature-md/</link>
      <pubDate>Sun, 03 Sep 2017 04:02:29 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2017-09-03-php-http-raw-post-data-feature-md/</guid>
      <description>最近在开发一个小微信应用时，发现使用原来的工具代码总是获取不到微信服务器发来的数据。原来的代码中使用$GLOBALS[&amp;quot;HTTP_RAW_POST_DATA&amp;quot;]的方式获取post提交的数据。查了查才发现，HTTP_RAW_POST_DATA 早在php 5.6.0时就已经废弃，到了7.0.0版本已经移除。我的服务器上php是7.0版本，难怪会发生这样的问题。文档中推荐使用php://input的方式代替$HTTP_RAW_POST_DATA获取post数据。
$postdata = file_get_contents(&amp;#34;php://input&amp;#34;);  php://input 是个可以访问请求的原始数据的只读流。 POST 请求的情况下，最好使用 php://input 来代替 $HTTP_RAW_POST_DATA，因为它不依赖于特定的 php.ini 指令。 而且，这样的情况下 $HTTP_RAW_POST_DATA 默认没有填充， 比激活 always_populate_raw_post_data 潜在需要更少的内存。 enctype=&amp;quot;multipart/form-data&amp;rdquo; 的时候 php://input 是无效的。
 这其实算是自己的问题了。。想偷懒不及时了解php的版本变动真是使不得&amp;gt;&amp;lt;
  </description>
    </item>
    
    <item>
      <title>有关php内建函数复杂度的一点探究</title>
      <link>https://www.takuzen.me/posts/2017-03-05-performance-of-php-built-in-functions/</link>
      <pubDate>Sun, 05 Mar 2017 00:16:38 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2017-03-05-performance-of-php-built-in-functions/</guid>
      <description>在用php实现CtCI里面的习题时，算法中常常要用到array_key_exists()方法。然而通常在数组中检索的复杂度为O(n)，那么这是否会对php实现的算法产生比较大的影响呢？
在php的 manual 中有人提到，isset()比array_key_exists()快的多，但是两者对null的处理方式是不一样的。
&amp;lt;?php //test.php $t[&amp;#39;a&amp;#39;] = null; if (isset($t[&amp;#39;a&amp;#39;])) echo &amp;#34;a is set\n&amp;#34;; else echo &amp;#34;a is not set\n&amp;#34;; if (array_key_exists(&amp;#39;a&amp;#39;, $t)) echo &amp;#34;a exists\n&amp;#34;; else echo &amp;#34;a doesn&amp;#39;t exists\n&amp;#34;; // 运行上面的代码，会输出： // a is not set // a exists 在开发中可以采用如下方法：
if (isset(..) || array_key_exists(...)) { ... } 大大提升了运行速度又保证了结果。
 Benchmark (100000 runs): array_key_exists() : 205 ms is_set() : 35ms isset() || array_key_exists() : 48ms
 另外 stackoverflow 上有人对array_*的复杂度做过一番调查：</description>
    </item>
    
    <item>
      <title>hexo博客突然丢失了所有的css js？？</title>
      <link>https://www.takuzen.me/posts/2016-11-05-hexo-vendors-folder-missing/</link>
      <pubDate>Sat, 05 Nov 2016 14:31:16 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2016-11-05-hexo-vendors-folder-missing/</guid>
      <description>我这个博客使用Github Pages + hexo + next主题，昨天提交一篇博客之后就跪了，看不见文章列表，控制台里发现所有在vendor目录下的css和js全部404。纠结了一下午终于在github上找到了这个问题的issue
 We recently updated to Jekyll v3.3, which ignores the vendor folder by default. If you&amp;rsquo;re not using Jekyll, you can add a .nojekyll file to the root of your repository to disable Jekyll from building your site. Once you do that, your site should build with your vendor folder.
 原来是github最近升级了Jekyll，升级之后会默认忽略vendor/vendors文件夹。。这个会直接影响到next主题的显示。
目前找到了这么几种解决办法：
 官方给出的解决办法就是在根目录下添加一个.nojekyll文件，对于hexo的话需要在.deploy_git和public目录下添加，然后hexo d即可。 更新next主题，作者已提交针对此问题的更新。 手动将 source/vendors 目录修改成 source/lib 或者其他的名称；同时，修改下主题配置文件_config.yml， 将 _internal: vendors 改成你所修改的名字  相关链接:</description>
    </item>
    
    <item>
      <title>composer中的autoload</title>
      <link>https://www.takuzen.me/posts/2016-11-05-php-composer-autoload/</link>
      <pubDate>Sat, 05 Nov 2016 02:42:06 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2016-11-05-php-composer-autoload/</guid>
      <description>composer的autoload可以轻松的实现php的自动加载。在composer.json中添加autoload字段即可。当前支持 PSR-0 PSR-4 classmap解析和files包含。官方推荐PSR-4标准（添加类时不需要重新生成加载器）。
PSR-4 Under the psr-4 key you define a mapping from namespaces to paths, relative to the package root. When autoloading a class like Foo\\Bar\\Baz a namespace prefix Foo\\ pointing to a directory src/ means that the autoloader will look for a file named src/Bar/Baz.php and include it if present. Note that as opposed to the older PSR-0 style, the prefix (Foo\\) is not present in the file path.</description>
    </item>
    
    <item>
      <title>ssh反向代理实现内网穿透（比较失败( ˙灬˙ )）</title>
      <link>https://www.takuzen.me/posts/2016-10-08-ssh-reverse-proxy/</link>
      <pubDate>Sat, 08 Oct 2016 14:45:08 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2016-10-08-ssh-reverse-proxy/</guid>
      <description>有关背景请参见http://www.upwzr.com/2016/10/08/run-ngrok/，本文是在使用ngrok之前的依次失败的尝试。。。当然，ngrok实际上也是是ssh来实现的。
对于内网主机想要外网访问，最简单的办法当然是在路由器上做手脚，但是在不能操作路由设备的时候（比如说学校的内网网段），想要实现外网访问可通过ssh隧道实现。只需要一条很简单的命令：
ssh -N -f -R 80:127.0.0.1:8001 root@123.45.67.89  -N 不执行远程命令 -f 后台执行 -R remote_port:localhost:local_port 远程端口转发 上面的命令就表示连接到123.45.67.89，将本地的8001端口转发到123.45.67.89的80端口。公网主机的80端口转发必须使用root权限，用root角色去连接公网主机。  -g (GatewayPorts) option 先贴出一段鸟文：
 When you forward a TCP port (either locally or remotely), by default SSH only listens for connections to the forwarded port on the loopback address (localhost, 127.0.0.1). This means only other programs running on the same host as the listening side of the forwarding can connect to the forwarded port.</description>
    </item>
    
    <item>
      <title>搭建自己的ngrok服务实现内网穿透</title>
      <link>https://www.takuzen.me/posts/2016-10-08-run-ngrok/</link>
      <pubDate>Sat, 08 Oct 2016 12:41:33 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2016-10-08-run-ngrok/</guid>
      <description>学校有台服务器上跑我们的自己用的gitlab，然而分配的ip是内网网段，在校外或者使用手机流量就没办法访问，跟信管中心申请公网ip又得看他们脸色( ∙̆ .̯ ∙̆ )。尝试了直接用ssh做反向代理，感觉效果不是很满意，不太稳定时常掉线，而且由于腾讯云的坑爹限制，没办法转发到公网80端口上。后来发现了一款神器ngrok，官网提供了收费的转发服务，国内也有不少热心童鞋提供了免费的ngrok服务。不过ngrok 1.x 的版本是开源的，干脆自力更生，搭建自己的ngrok服务。
准备 首先最重要的当然是得有一台公网主机，我的是腾讯云的vps；然后内网主机需要保证可以访问外网（废话），然后要有个域名，绑定到公网ip上。最好做下泛解析，也就是添加一条形如*.yourdomain.xxx的A记录。 公网主机有些环境要配置好，下面这几个包要安装上，为了后面能够顺利的编译ngrok源码（以ubuntu为例）：
sudo add-apt-repository ppa:ubuntu-lxc/lxd-stable sudo apt-get update sudo apt-get install golang sudo apt-get install build-essential mercurial git ngrok使用go写的，所以上面安装了golang环境。有时因为友好的GFW，可能会获取不到源，可参见这个Go 安装
安装ngrok 获取源码 git clone https://github.com/inconshreveable/ngrok.git ngrok cd ngrok export GOPATH=~/ngrok # 也就是刚刚获取的源码位置 最后一句是go环境的配置，跳过不执行应该也可以，没试过。
生成自签名证书 注意第二步和第五步中要替换你自己的域名。
openssl genrsa -out rootCA.key 2048 openssl req -x509 -new -nodes -key rootCA.key -subj &amp;quot;/CN=upwzr.com&amp;quot; -days 5000 -out rootCA.pem openssl genrsa -out device.key 2048 openssl req -new -key device.</description>
    </item>
    
    <item>
      <title>hexo迁移心得</title>
      <link>https://www.takuzen.me/posts/2016-08-26-hexo/</link>
      <pubDate>Fri, 26 Aug 2016 18:44:24 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2016-08-26-hexo/</guid>
      <description>经过一番折腾，把博客从Jekyll迁移到了Hexo。不得不说Hexo的体验真的不错。有很多jekyll没有的特性。
skip_render 博客建立完之后想提交readme，结果放在source文件夹下的readme.md总是会被渲染成html。后来发现在根目录的__config.yml里有skip_render这个参数，用来定义不进行解析的文件。
skip_render: readme.md 生成sitemap 先安装：
npm install hexo-generator-sitemap --save 然后再根目录的_config.yml里设置：
sitemap: path: sitemap.xml 多终端同步 平时kubuntu+windows经常切换，两个系统上都有写字的需要。hexo使用自带的d命令部署，提交到github上的是解析之后的文件。网上参考了几种方法，感觉都不太满意。最后我决定创建额外的分支来提交源文件。
git checkout -b src git add . git commit -m &amp;quot;source branch&amp;quot; git push origin src 根据自己的需要修改.gitignore文件。 在另外的终端下直接clone仓库进行部署就好。然后平时直接在src分支下工作，使用hexo d -g会直接发布到master分支，源文件就通过正常的提交方式提交，两者互不冲突。 当然，写新文字前记着git pull把另外一台机器之前提交的内容更新下来。
  </description>
    </item>
    
    <item>
      <title>jquery实现表单上传图片预览</title>
      <link>https://www.takuzen.me/posts/2016-06-03-form-image-preview/</link>
      <pubDate>Fri, 03 Jun 2016 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2016-06-03-form-image-preview/</guid>
      <description>最近有个小页面需要实现图片上传预览，自己还不擅长javascript，迷茫的看了好久文档之后算是利用File API实现了这个事情。 js代码：
 &amp;lt;script&amp;gt; function preview(files){ for (var i = 0; i &amp;lt; files.length; i++) { var file = files[i]; var reader = new FileReader(); reader.onload = (function(aImg) { return function(e) { //假设页面上的img元素id为showimg $(&#39;#showimg&#39;) . attr(&#39;src&#39;, e.target.result); }; })(); reader.readAsDataURL(file); } } &amp;lt;/script&amp;gt;  调用只要在input元素上加上onchange=&amp;quot;preview(this.files)&amp;quot;。
 相关链接 在web应用中使用文件 &amp;ndash; Mozilla 文档 来自百度的一个上传组件http://fex.baidu.com/webuploader/
   </description>
    </item>
    
    <item>
      <title>超老本子CF-W2安装lubuntu</title>
      <link>https://www.takuzen.me/posts/2016-03-04-refresh-old-laptop/</link>
      <pubDate>Fri, 04 Mar 2016 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2016-03-04-refresh-old-laptop/</guid>
      <description>祭出大杀器CF-W2 前几年亲戚去日本出差给我老爸带回来一台二手本本，2003年左右的机器，质量确实过硬，没换过一个零件。。奔腾M 1GHz + 760MB内存，用xp勉强可以看个新闻玩玩同城游戏。到我手里后，实在是食之无味弃之可惜，索性装个linux敲代码好了。
老机器真蛋疼 轻量级的linux有不少，lubuntu xubuntu PuppyLinux这些都是很常见的了。lubuntu号称256M内存就能跑起来，LXDE也比puppy用的JVM好看一点（私人观点），那就先搞这个试试（15.04）。最开始做了个U盘启动盘，结果BIOS里死活读不出usb，只好又刻了个CD。 lubuntu在12.04开始需要cpu支持pae，幸运的是我这老古董貌似完全不支持，因此在进入到grub后光标移动到install lubuntu选项，F6然后esc，进入编辑，在最后面加入forcepae,最后大概是下面这样的：
Boot Options file=/cdrom/preseed/ubuntu.seed boot=casper initrd=/casper/initrd.lz quiet splash -- forcepae  这么改完后可以正常启动安装。安装过程语言最好选择English，不然后面会出现乱码，完全辨认不出选项。
优化 显卡问题 除了开机有（chao）些（ji）慢，编译有（shi）些（fen）慢，总体上还是非常流畅的。不过每次开机后桌面壁纸会变成一坨颜色。在官方wiki上找到了应对老Intel显卡的处理办法。
sudo vim /etc/X11/xorg.conf  添加如下语句：
Section &amp;quot;Device&amp;quot; Identifier &amp;quot;Intel Graphics&amp;quot; Driver &amp;quot;intel&amp;quot; Option &amp;quot;AccelMethod&amp;quot; &amp;quot;uxa&amp;quot; EndSection  重启X，问题解决。
中文乱码 安装过程中如果选择中文会出现乱码，安装好之后的系统人类基本无法操作。不过update完了之后问题即可解决。建议用英文安装好，update完事再切换中文。
 相关链接 AdvancedMethods
   </description>
    </item>
    
    <item>
      <title>Linux下curl实现某资源站自动签到脚本</title>
      <link>https://www.takuzen.me/posts/2015-12-06-curl-on-linux-for-autoregistering/</link>
      <pubDate>Sun, 06 Dec 2015 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2015-12-06-curl-on-linux-for-autoregistering/</guid>
      <description>前言 经常去某资源站下载美剧，我很喜欢的的团(ren)队(ren)在运营这个网站，资源很及时也很好。网站要求登录才能看到下载链接。连续登录达到多少天就可以升级并且可以查看更多下载资源。然而我这种人是不可能记着每天都去网站上签到的(-&amp;lt;-)。。。正好最近买了vps，于是决定自己写一个自动登录的脚本。
分析 Fiddler抓包发现此网站登陆时url为/User/Login/ajaxLogin，post提交用户名和密码。
登录成功之后返回JSON字符串
用户等级等相关信息是通过之后的两个请求hotkeyword``getCurUserTopInfo获取的，用于网站顶部的信息和搜索栏。
通过我的测试发现这两个请求并不会影响cookie的变化，不模拟也完全没问题。
签到页面url为/user/sign,签到按钮通过js控制15s后才可以点击，点击后fiddler抓到了/user/sign/dosign的请求，request包里面看起并没有什么新内容，response返回了一个json
json里面的info表示签到结果，1为成功。data为连续签到天数。
开搞 OK！开始祭出杀气__curl__，一开始是用的php，但是向dosign发送请求总是返回错误状态，可能是那里的curl参数配置错了，找个时间再回过头去看一下。。就不说这个了。
后来决定干脆直接上linux写脚本。我水平比较low。。就是简单的3个请求，存一下cookie，也没搞啥复杂东西。
先简单在本地测试了一下
哈哈，大功告成！！
最后把脚本丢到了vps上跑，crontab添加一条定时任务，每天凌晨啪啪啪~~ 麻麻再也不用担心我的签到~~
  </description>
    </item>
    
    <item>
      <title>vps搭建私人pptp vpn,新姿势GET！</title>
      <link>https://www.takuzen.me/posts/2015-12-01-my-personal-pptp-vpn-on-vps/</link>
      <pubDate>Tue, 01 Dec 2015 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2015-12-01-my-personal-pptp-vpn-on-vps/</guid>
      <description>一直用hosts和goagent的姿势搞学(ke)术(xue)研(shang)究(wang)，苦于两种方式限制颇多不稳定又不安全。不久前咬牙花了5刀开了DO的vps（当然，DO赠送了10刀回来），穷学生一枚的我终于能换换新姿势了，直接动手搭建了vpn。由于本人不太喜欢用额外的客户端，再加上pptp以简单著称，我决定采用pptp server。
DigitalOcean购买VPS 在网上查了大家的经验攻略，自己看了下DO、搬瓦工、bugdetVM，最后还是选了DO，反正现在感觉速度很不错，挺满意的。
这个流程很简单，在官网上注册账号，用PayPal下个5刀的订单，DO会赠送10美元回来。Paypal支持银联的卡，我就是用建行的借记卡支付的。支付完成后按照流程创建Droplet，我用的ubuntu14.04 x64,旧金山的服务器，创建过程中添加SSH,用puttyputtygen即可。具体内容在下面相关链接。
安装pptp和配置 putty登陆，速度可以，直接开始安装。这期间我试了试DO网站上的console，感觉不好用。还是putty方便。
 # sudo apt-get update # sudo apt-get install pptpd  事实证明我朝GFW有多坑，服务器在美国的ubuntu从官方源下载速度炒鸡快，瞬间完事儿。
修改pptp配置 修改/etc/pptpd.cong文件
 # sudo nano /etc/pptpd.conf  在末尾添加server IP 和 client IP
 localip 192.168.0.1 remoteip 192.168.0.100-200  这里用的是nano编辑器，不熟悉的同学（比如我）可以参见相关链接里面的“Linux下的Nano命令”。其实用不到啥。。就是一个保存和退出而已。。nano还是比较简单的。
修改DNS配置  # sudo nano /etc/ppp/pptpd-options  添加google的DNS
 ms-dns 8.8.8.8 ms-dns 8.8.4.4  这个文件里还开启了其他的一些选项，课根据需要开启我从别的大神那里复制来了一些资料：
 name pptpd（pptpd服务名，可以随便填写。） refuse-pap（拒绝pap身份认证模式。） refuse-chap（拒绝chap身份认证模式。） refuse-mschap（拒绝mschap身份认证模式。） require-mschap-v2（在端点进行连接握手时需要使用微软的 mschap-v2 进行自身验证。） require-mppe-128（MPPE 模块使用 128 位加密。） ms-dns 8.8.8.8 (ppp 为 Windows 客户端提供 DNS 服务器 IP 地址。) proxyarp (建立 ARP 代理键值。) nodefaultroute（不替换默认路由） debug（开启调试模式，相关信息记录在 /var/logs/message 中。现在默认是被注释掉的。） lock（锁定客户端 PTY 设备文件。） nobsdcomp (禁用 BSD 压缩模式。)</description>
    </item>
    
    <item>
      <title>快速临时解决phpmyadmin上传sql文件大小限制问题</title>
      <link>https://www.takuzen.me/posts/2015-10-29-phpmyadmin-upload-filesize-limit/</link>
      <pubDate>Thu, 29 Oct 2015 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2015-10-29-phpmyadmin-upload-filesize-limit/</guid>
      <description>刚刚需要往服务器上导入数据库，服务器上的phpmyadmin有上传限制，最大是8192kb，我要导入的数据库压缩完了还有8300多。。不想对服务器配置做啥改动，不能远程登录mysql,脚本也不太好跑。查了一下原来phpmyadmin的上传限制是受php.ini和自己的config控制的，mysql控制台并不受影响。干脆直接从命令行导入好了。
 mysql&amp;gt;use test; mysql&amp;gt;set names utf8; mysql&amp;gt;source D:/fuck.sql;  </description>
    </item>
    
    <item>
      <title>开机流程中的事儿</title>
      <link>https://www.takuzen.me/posts/2015-10-24-about-booting/</link>
      <pubDate>Sat, 24 Oct 2015 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2015-10-24-about-booting/</guid>
      <description>一些基本概念 MBR分区表  MBR - Master Boot Record 主引导记录/主引导扇区
 MBR分区方案中硬盘的每个扇区通过32位二进制数逻辑块地址（LBA）来标识。计算机开机后访问硬盘时要先读取第一个扇区，这个扇区（通常有512bytes）储存着主引导记录MBR（446bytes）和分区表DPT（64bytes）。主引导记录中装有开机管理程序（boot loader），分区表中记录了磁盘分区情况。由于每一条分区记录需要16个字节，因此MBR分区结构只能支持4个主分区，想得到4个以上的分区需要采用扩展分区，注意扩展分区只能有一个，在windows系统中默认划分一个主分区给系统，其余的全部划入扩展分区。扩展分区可以划分出多个逻辑分区。 MBR的局限性在于，分区表大小固定，只能支持4个主分区，而且最大只能支持到2.2TB的分区容量。随着硬盘技术的发展，MBR分区方案有些撑不住了，再加上win8/8.1的催化，GPT分区表逐渐成为主流。
GPT分区表  GPT - GUID Partition Table 全局唯一标识分区表
 有些硬盘厂商注意到了MBR分区方案的容量局限，就把容量较大的产品升级到了4KB的扇区，这样使得MBR可以支持最大到16TB,但同时带来了关于在有较大的块的设备从BIOS启动时，如何最佳的划分分区。GPT分区方案中LBA是64位2进制数，因此对于扇区为512bytes的硬盘，容量可以达到9.4ZB。。。 GPT表的最开头，有一块类似MBR的表头，称为PMBR，存有引导程序和一个特殊标识用来表示次硬盘使用GPT分区方式。接下来的LBA1是GPT的分区表头，记录了硬盘的可用空间和分区表项的大小和数目，还有备份分割的位置。GPT有34个LBA区块记录，从LBA2到LBA33每个区块都可以记录4条分区记录，每条记录都达到128bytes。
在一些MBR/GPT混合硬盘中，不同系统实现有些不一致，windows系统通常优先使用MBR。 再来一张windows的分区类型GUID  相关链接 4K对齐
 BIOS  BIOS - Basic Input/Output System 基本输入输出系统
 BIOS是一种业界标准的固件接口，用于开机自检以及加载引导程序。BIOSB其实就是一个16位汇编代码，寄存器参数调用方式，静态链接，以及1MB以下内存固定编址形式的程序。现在的BIOS储存在主板上的只读储存器（EEPROM）或者是闪存（flash）中，可以更新也不怕断电了。
CMOS  CMOS - Complementary Metal Oxide Semiconductor 互补金属氧化物半导体 (-.-)
 在计算机领域，CMOS就是一块重要的随机储存器（RAM），BIOS的所有信息都存在这里，最怕被抠电池。。
EFI(UEFI)  EFI - Extensible Firmware Interface 可扩展固件接口 UEFI - Unified Extensible Firmware Interface 统一可扩展固件接口
 UEFI是一种详细描述全新类型接口的标准，是适用于电脑的标准固件接口，旨在代替BIOS。UEFI通过C语言开发，拥有很多BIOS不具备的功能，比如图形化界面、多种多样的操作方式、允许植入硬件驱动程序（.efi）。
 相关链接 UEFI官方首页 “暗云”bootkit木马详细技术分析</description>
    </item>
    
    <item>
      <title>解决jekyll server无法启动问题</title>
      <link>https://www.takuzen.me/posts/2015-10-15-jekyll-server-failed/</link>
      <pubDate>Thu, 15 Oct 2015 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2015-10-15-jekyll-server-failed/</guid>
      <description>前几天想要post新博客，照旧在本地测试效果，结果忽然发现jekyll server启动不了了 目测是端口被占用，但是啥玩意会占用4000端口呢。。。netstat了下 3608号进程在占用，继续查这个3608进程。。 我勒个草，竟然是个福昕的保护程序。。没啥话可说了，现在就是在抉择是杀掉这个进程还是换个jekyll serve端口(&amp;gt;=&amp;lt;)先把这篇提交了再说
 $ jekyll serve --port 4001  </description>
    </item>
    
    <item>
      <title>SQL Server更改服务器身份验证模式</title>
      <link>https://www.takuzen.me/posts/2015-10-09-sql-server-change-authentication-mode/</link>
      <pubDate>Fri, 09 Oct 2015 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2015-10-09-sql-server-change-authentication-mode/</guid>
      <description>使用 SQL Server Management Studio 更改安全身份验证模式   在 SQL Server Management Studio 的对象资源管理器中，右键单击服务器，再单击“属性”。
  在“安全性”页上的“服务器身份验证”下，选择新的服务器身份验证模式，再单击“确定”。
  在 SQL Server Management Studio 对话框中，单击“确定”以确认需要重新启动 SQL Server。
  在对象资源管理器中，右键单击您的服务器，再单击“重新启动”。如果运行有 SQL Server 代理，则也必须重新启动该代理。
  启用 sa 登录名   在对象资源管理器中，依次展开“安全性”、“登录名”，右键单击“sa”，再单击“属性”。
  在“常规”页上，您可能需要为登录名创建密码并确认该密码。
  在“状态”页上的“登录”部分，单击“启用”，然后单击“确定”
  使用 Transact-SQL 启用 sa 登录名   在“对象资源管理器”中，连接到 数据库引擎的实例。
  在标准菜单栏上，单击“新建查询”。
  将以下示例复制并粘贴到查询窗口中，然后单击“执行”。下面的示例启用 sa 登录名并设置一个新密码。
 ALTER LOGIN sa ENABLE ; GO ALTER LOGIN sa WITH PASSWORD = &#39;&amp;lt;enterStrongPasswordHere&amp;gt;&#39; ; GO     相关链接 MSDN-管理数据库引擎服务</description>
    </item>
    
    <item>
      <title>HTML常用头标签</title>
      <link>https://www.takuzen.me/posts/2015-10-08-html-head-tags/</link>
      <pubDate>Thu, 08 Oct 2015 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2015-10-08-html-head-tags/</guid>
      <description>meta &amp;lt;meta&amp;gt;标签提供了 HTML 文档的元数据(metadate)。元数据不会显示在客户端，而是被浏览器解析。 meta元素通常用于指定网页的描述，关键词，的文件的最后修改，作者，和其他元数据。 元数据可以被使用浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 Web 服务调用。
&amp;lt;meta&amp;gt;标签通常位于&amp;lt;head&amp;gt;区域内,有如下几个属性；
 charset-定义文档字符编码，常用值为utf-8 __http-equiv__-提供了名称/值对中的名称，并指示服务器把名称/值对添加到发送给浏览器的MIME文档头部 __name__-提供了名称/值对中的名称，通常情况下可自定义对自己和源文档的读者来说富有意义的名称，常用值有keywords``description等 __content__-定义与http+equiv或name属性相关的元信息，即名称/值对中的值 __scheme__-定义用于翻译content属性值的格式，html5中已删除此属性
 使用http-equiv属性，服务器将把名称/值对添加到发送给浏览器的内容头部，例如：
 &amp;lt;meta http-equiv=&amp;quot;charset&amp;quot; content=&amp;quot;iso-8859-1&amp;quot;&amp;gt; &amp;lt;meta http-equiv=&amp;quot;expires&amp;quot; content=&amp;quot;31 Dec 2008&amp;quot;&amp;gt;  浏览器头部就应包含：
 content-type: text/html charset:iso-8859-1 expires:31 Dec 2008  所有服务器都至少要发送一个：content-type:text/html，这将告诉浏览器准备接受一个 HTML 文档。
其它实例：
 //定义文档关键词，用于搜索引擎 &amp;lt;meta name=&amp;quot;keywords&amp;quot; content=&amp;quot;HTML, CSS, XML, XHTML, JavaScript&amp;quot;&amp;gt; //每30秒刷新页面 &amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;30&amp;quot;&amp;gt; //声明文档使用的字符编码 &amp;lt;meta charset=&#39;utf-8&#39;&amp;gt;  还有一种lang属性写法：
 //简体中文 &amp;lt;html lang=&amp;quot;zh-cmn-Hans&amp;quot;&amp;gt; //繁体中文 &amp;lt;html lang=&amp;quot;zh-cmn-Hant&amp;quot;&amp;gt; //英文 &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;  lang属性的取值应该遵循 BCP 47 - Tags for Identifying Languages</description>
    </item>
    
    <item>
      <title>从教务系统中获取课程表图片</title>
      <link>https://www.takuzen.me/posts/2015-08-29-get-img-from-base64/</link>
      <pubDate>Sat, 29 Aug 2015 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2015-08-29-get-img-from-base64/</guid>
      <description>教务系统中的课表以图片形式显示，又不知何故不允许另存，禁用右键也无效（教务使用体验极差，这方面倒是做的细心V.V），以前是用chrome开发者工具翻一下resource就能找到图片，拖下来就成。 昨天想再把新学期课表存下来发现不行了，直接拖到电脑上不管用，拖到新标签页里一堆乱码 拖到sublime text里面，直接变成了整齐的编码 网上查一下之后知道图片经base64编码，我拖下来得到的就是编码后的数据，重现的话写个html就行了
&amp;lt;span&amp;gt;&amp;lt;img src=&amp;quot;data:image/jpg;base64,编码后的数据&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; 看出来了吧，上面图里我拖下来的其实是src里的完整格式。  这样就把图片的“文字版”写到html里了，用浏览器访问即可解码出图片，可以随便保存啦。
这种用base64编码之后传输图片的形式还是比较不错，从别人的博客上摘录下“减少了HTTP请求，某些文件可以避免跨域的问题，没有图片更新要重新上传，还要清理缓存的问题”这些优点。但实际上这种方式并不像想象中那样可以节省流量，文件反而增大约35%，所以大图片就不要用这种方法了。</description>
    </item>
    
    <item>
      <title>SQL字符串转换成时间</title>
      <link>https://www.takuzen.me/posts/2015-11-16-sql-string-to-date/</link>
      <pubDate>Mon, 03 Aug 2015 09:00:00 +0000</pubDate>
      
      <guid>https://www.takuzen.me/posts/2015-11-16-sql-string-to-date/</guid>
      <description>最近改一个网站，网站的文章顺序总是很奇怪，看代码明明是order by time desc。看了数据库之后发现time列是字符串格式，导致比较的时候2015/11/2会被认为比2015/11/15大。查了一下后将sql语句改为.......order by cast([time] as date) desc 就解决了问题。
SQL Server支持的两个转换函数：
 CAST ( expression AS data_type [ ( length ) ] ) CONVERT ( data_type [ ( length ) ] , expression [ , style ] )  还有几个其他的转换函数，详细内容请见相关链接。
 相关链接 date (Transact-SQL) - MSDN - Microsoft CAST 和 CONVERT (Transact-SQL)
   </description>
    </item>
    
  </channel>
</rss>
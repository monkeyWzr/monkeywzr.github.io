<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on マクロス</title><link>https://www.takuzen.me/tags/docker/</link><description>Recent content in docker on マクロス</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>呉</copyright><lastBuildDate>Wed, 09 Mar 2016 09:00:00 +0000</lastBuildDate><atom:link href="https://www.takuzen.me/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>docker基础简记</title><link>https://www.takuzen.me/posts/2016-03-09-docker-guide/</link><pubDate>Wed, 09 Mar 2016 09:00:00 +0000</pubDate><guid>https://www.takuzen.me/posts/2016-03-09-docker-guide/</guid><description>Docker是什么 Docker allows you to package an application with all of its dependencies into a standardized unit for software development. &amp;mdash;-What is Docker?
Docker是近几年兴起的发展非常快速的开源项目，可用来创建非常轻量的“虚拟机”。在这里重要的两个概念是 镜像 和 容器 。
docker命令简记 run 启动 -t 在容器内指定一个终端 -i 允许对容器内的STDIN进行交互 -d 在容器内已后台进程模式运行 -P 将容器内部使用的网络端口随机映射到主机高端口上 -p 指定要绑定的端口，具体用法见文档 -e KEY=value 设置环境变量 &amp;ndash;name container_name 为容器命名 &amp;ndash;rm 创建临时容器，停止后删除 ps 查看正在运行的容器 -l 显示最后启动容器的详细信息 -a 显示所有容器，包括已经停止的 logs container_name 查看容器内的标准输出 -f 保持活动状态，动态显示新添加的信息 stop 停止正在工作的容器 version 返回Docker 客户端和进程的版本信息 port container_name top 查看容器内部运行的进程 inspect 查看容器的底层信息（配置和状态），JSON格式 -f &amp;lsquo;{{ obj.</description></item></channel></rss>
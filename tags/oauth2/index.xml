<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>oauth2 on マクロス</title><link>https://www.takuzen.me/tags/oauth2/</link><description>Recent content in oauth2 on マクロス</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>呉</copyright><lastBuildDate>Fri, 22 Apr 2016 09:00:00 +0000</lastBuildDate><atom:link href="https://www.takuzen.me/tags/oauth2/index.xml" rel="self" type="application/rss+xml"/><item><title>简记oath2.0</title><link>https://www.takuzen.me/posts/2016-04-22-understanding-oauth2/</link><pubDate>Fri, 22 Apr 2016 09:00:00 +0000</pubDate><guid>https://www.takuzen.me/posts/2016-04-22-understanding-oauth2/</guid><description>简介 OAuth2就是第三方应用获取授权的一套开放网络标准。它在客户端和服务端提供了一层中间授权层，客户端提供登录信息给授权层，登录成功后会拿到一张自己的通行令牌（token），客户端凭借此令牌别可以得到相行的服务端访问权限。
授权流程 客户端向用户提示授权 用户同意授权，向客户端提供授权许可（grant） 客户端向认证服务器发送认证请求，请求中包含用户提供的授权许可 认证成功后认证服务器向客户端发放令牌（token） 客户端使用令牌向服务器端请求资源 资源服务器验证令牌有效，答复请求 授权许可方式 在用户向客户端提供授权许可这一环节，OAuth2定义了四种类型：授权码模式（authorization code）、简化模式（implicit）、密码模式（resource owner password credentials）、客户端模式（client credentials）。
授权码（authorization code） 这种模式中，客户端将用户引导到授权服务器上，用户同意授权后授权服务器将会令用户重定向至客户端指定的回调地址，并带有授权码。客户端收到授权码后便会自行请求认证服务器，认证服务器核对无误即会返回给客户端访问令牌和更新令牌。整个流程中用户实际上只是跟认证服务器提交了认证，并未与客户端分享任何登录信息。
简化模式（implicit） （懒得简化了，先贴出来放在这=。=） The implicit grant is a simplified authorization code flow optimized for clients implemented in a browser using a scripting language such as JavaScript. In the implicit flow, instead of issuing the client an authorization code, the client is issued an access token directly (as the result of the resource owner authorization).</description></item></channel></rss>